//#FILE_REGION[ F.100 ]BEG####################################//

    //[ DOTADIW: HELLO_VERTEX_AND_FRAGMENT_SHADER_SOURCE ]//    
    
    //# OUTSIDE_OF_SCOPE_OF_THIS_FILE #//
    //: 1: Compiling or validating shader code.
    //: 2: Loading glslangValidator.exe (shader compiler)

typedef
    char const *const
    F100_READ_ONLY_STRING_CONTAINING_SHADER_SOURCE_CODE;

F100_READ_ONLY_STRING_CONTAINING_SHADER_SOURCE_CODE
F100_vertex_shader_source_code =( ////////////////////////
"                                                        "
"   #version 450                                         "
"   #extension GL_ARB_separate_shader_objects : enable   "
"                                                        "                                                 
"   layout(location = 0) out vec3 fragColor;             "
"                                                        "
"   out gl_PerVertex {                                   "
"       vec4 gl_Position;                                "
"   };;                                                  "
"                                                        "
"   vec2 positions[3] = vec2[](                          "
"       vec2( 0.0, -0.5)                                 "    
"   ,   vec2( 0.5,  0.5)                                 "     
"   ,   vec2(-0.5,  0.5)                                 "   
"   );;                                                  "
"                                                        "
"  //:SC[VKTUTPDF2018]BP[101]                            "
"  vec3 colors[3] =(                                     "
"      vec3[](                                           "
"          vec3(1.0, 0.0, 0.0)                           "
"      ,   vec3(0.0, 1.0, 0.0)                           "
"      ,   vec3(0.0, 0.0, 1.0)                           "
"      )                                                 "
"  );;                                                   "
"                                                        "                                                
"   void main() {                                        "
"                                                        "
"       gl_Position =(                                   "
"           vec4(                                        "
"               positions[ gl_VertexIndex ] //:[X,Y]     "     
"           ,   0.0  //: Z --------------------[ Z ]     "                      
"           ,   1.0  //: W --------------------[ W ]     "                      
"           )                                            "
"       );;                                              "
"                                                        "
"       fragColor =(                                     "
"           colors[gl_VertexIndex]                       "
"       );;                                              "
"                                                        "
"   };;                                                  "
"                                                        "
);//[F100_vertex_shader_source_code:///////////////////]//


F100_READ_ONLY_STRING_CONTAINING_SHADER_SOURCE_CODE
F100_fragment_shader_source_code =( //////////////////////
"                                                        "
"   #version 450                                         "
"   #extension GL_ARB_separate_shader_objects : enable   "
"                                                        "
"   //: outColor linked to the first and only            "
"   //: framebuffer at index 0                           "
"   layout(location = 0)   out    vec4    outColor;      "
"   layout(location = 0)    in    vec3   fragColor;      "
"   //:               |      |                           "
"   //:               Both location 0,                   "
"   //:               but one is ~out~ and other is ~in~ "
"   //:               so no overlap.                     "
"                                                        "
"   void main() {                                        "
"       outColor =(                                      "
"           vec4(fragColor, 1.0)                         "
"       );;                                              "
"       //| outColor = (                       |//       "     
"       //|     vec4(                          |//       "     
"       //|         1.0  //:RED    | ALPHA  ?  |//       "     
"       //|     ,   0.0  //:GREEN  | BLUE   ?  |//       "     
"       //|     ,   0.0  //:BLUE   | GREEN  ?  |//       "     
"       //|     ,   1.0  //:ALPHA  | RED    ?  |//       "     
"       //|     )                              |//       "     
"       //| )                                  |//       "     
"   };;                                                  "
"                                                        "
);//[F100_fragment_shader_source_code://///////////////]//

//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
/** ---- **/                                        /** ---- **/
/** ---- **/    //[First function always "Halt"]//  /** ---- **/
/** ---- **/    static void                         /** ---- **/
/** ---- **/    f100_Halt( const char* msg ){       /** ---- **/
/** ---- **/        printf(                         /** ---- **/
/** ---- **/            "[f100_Halt]:%s\n", msg     /** ---- **/
/** ---- **/        );;                             /** ---- **/
/** ---- **/        fflush(stdout); exit(666);      /** ---- **/
/** ---- **/    }//[;]//                            /** ---- **/
/** ---- **/                                        /** ---- **/
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
static void
f100_PrivateInit( void ){

   

    if( NULL ==   F100_vertex_shader_source_code 
    ||  NULL == F100_fragment_shader_source_code
    ){
        f100_Halt("[SOURCE_CODE_NULL]");
    };;



}//[;PrivateInit;]//////////////////////////////////////////////
//|IM:Init_And_Main: (SHORTCUT[ VKG_03_IAMB ]) |||||||||||||||//
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//
    int F100_Init(){                          //[IM--------IM]//
        printf("[BEG:F100:Init]\n");          //[IM--------IM]//
                                              //[IM--------IM]//
            ////////////////////////////////////////////////////
            //| ".SUPER_CHAIN()" |||||||||||||||||||||||||||||//
            int ret = F90_Init(); 
            //| LAST_ITEM_IN_CODE_CHAIN: |||||||||||||||||||||//
            f100_PrivateInit();
            ////////////////////////////////////////////////////
                                              //[IM--------IM]//
        printf("[END:F100:Init]\n");          //[IM--------IM]//
        return( ret );                        //[IM--------IM]//
    }//[;]//                                  //[IM--------IM]//
    int F100_Main(){                          //[IM--------IM]//
        F100_Init();                          //[IM--------IM]//
                                              //[IM--------IM]//
        //| RLSI:RENDER_LOOP_STAND_IN ||||||||||||||||||||||||//
        ////////////////////////////////////////////////////////
        printf("[F100:TO_EXIT:CTRL+C]\n");fflush(stdout );
        while( 1 ){ }; //| LOOP_FOREVER ||||||||||||||||||||||//
        ////////////////////////////////////////////////////////
                                              //[IM--------IM]//
        return( 0 );                          //[IM--------IM]//
    }//[;]//                                  //[IM--------IM]//
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

//#FILE_REGION[ F.100 ]END####################################//