
//[ DOTADIW : #WRAPPER_FUNC_TEMPLATE# -----------------------|//

//[ Further abstracts use of parameter lists file so that    ]//
//[ we don't have to write function wrapper boilerplate      ]//
//[ every time we wrap a function.                           ]//
//[ All we have done here is replaced lines that have the    ]//
//[ comment #Example# with a macro for the function names.   ]//

//|F05_MACRO_wrapper: The wrapping function with type safety.|//
//|F05_MACRO_wrapped: The uncasted func ptr pulled from dll. |//

    //:Can we abstract this further?
    F06_F05_MACRO_RETURNTYPE
    
    //:
    F05_MACRO_wrapper //:<--#Example#: F05_CreateWindowExW
    (

        #define F05_F04_MACRO_USE_AS_FORMAL_PARAM_LIST 1
        #include "./F.04"
        #undef  F05_F04_MACRO_USE_AS_FORMAL_PARAM_LIST

    ){

        typedef  
            F06_F05_MACRO_RETURNTYPE
            (*pfn )(            
                 
                #define F05_F04_MACRO_USE_AS_FORMAL_PARAM_LIST 1
                #include "./F.04"
                #undef  F05_F04_MACRO_USE_AS_FORMAL_PARAM_LIST
     
            );

        pfn fun =(pfn) 
        F05_MACRO_wrapped; //:<--#Example#:F01_CreateWindowExW

        F06_F05_MACRO_RETURNTYPE 
        ret=( fun(

            #define F05_F04_MACRO_USE_AS_ACTUAL_ARGUMENT_LIST 1
            #include "./F.04"
            #undef  F05_F04_MACRO_USE_AS_ACTUAL_ARGUMENT_LIST

        ));

        return(  ret  );

    }//[F05_MACRO_wrapper]//