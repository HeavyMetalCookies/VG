//#FILE_REGION[ F.01 ]BEG#####################################//

//# DOTADIW:DLL_FUNC_LIST -----------------------------------]//

//[ The function you want, and the DLL file it comes from. --]//

//# NOTE: Using different cases like "User32 & usEr32" ------#//
//# Will screw up your DLL caching code!               ------#//
//! NODOC: Missing MSDN documentation. --------------------- !//

#ifndef F01_BASH_CONCATTED

F02_F01_MACRO( RegisterClassExW , user32  )  //[ 01 ]//
F02_F01_MACRO( CreateWindowExW  , user32  )  //[ 02 ]//
F02_F01_MACRO( DestroyWindow    , user32  )  //[ 03 ]//
F02_F01_MACRO( PostQuitMessage  , user32  )  //[ 04 ]//
F02_F01_MACRO( DefWindowProcW   , user32  )  //[ 05 ]//
F02_F01_MACRO( LoadIconA        , user32  )  //[ 06 ]//
F02_F01_MACRO( LoadCursorA      , user32  )  //[ 07 ]//
F02_F01_MACRO( GetWindowDC      , user32  )  //[ 08 ]//
F02_F01_MACRO( ChoosePixelFormat, gdi32   )  //[ 09 ]//
F02_F01_MACRO( SetPixelFormat   , gdi32   )  //[ 10 ]//
F02_F01_MACRO( GetModuleHandleW , kernel32)  //[ 11 ]//
F02_F01_MACRO( GetDesktopWindow , user32  )  //[ 12 ]//
F02_F01_MACRO( TranslateMessage , user32  )  //[ 13 ]//
F02_F01_MACRO( DispatchMessageW , user32  )  //[ 14 ]//
F02_F01_MACRO( PeekMessageW     , user32  )  //[ 15 ]//
F02_F01_MACRO( ShowWindow       , user32  )  //[ 16 ]//
F02_F01_MACRO( UpdateWindow     , user32  )  //[ 17 ]//
F02_F01_MACRO( SetFocus         , user32  )  //[ 18 ]//
F02_F01_MACRO( Sleep            , kernel32)  //[ 19 ]//
F02_F01_MACRO( GetProcessHeap   , kernel32)  //[ 20 ]//
F02_F01_MACRO( CreateThread     , kernel32)  //[ 21 ]//
F02_F01_MACRO( HeapAlloc        , kernel32)  //[ 22 ]//

//:Vulkan_Functions:
////////////////////////////////////////////////////////////////

//:MAKES: F02_vkEnumerateInstanceExtensionProperties
F02_F01_MACRO(  
              vkEnumerateInstanceExtensionProperties 
,   vulkan-1 
)

//:MAKES: F02_vkCreateInstance
F02_F01_MACRO( 
              vkCreateInstance 
,   vulkan-1 
)

//:MAKES: F02_vkEnumerateInstanceLayerProperties
F02_F01_MACRO(
              vkEnumerateInstanceLayerProperties
,   vulkan-1
)

//:MAKES: F02_vkGetInstanceProcAddr
F02_F01_MACRO(
              vkGetInstanceProcAddr
,   vulkan-1
)

//:MAKES: F02_vkEnumeratePhysicalDevices
F02_F01_MACRO(
              vkEnumeratePhysicalDevices
,   vulkan-1
)

//:MAKES: F02_vkGetPhysicalDeviceFeatures
F02_F01_MACRO(
              vkGetPhysicalDeviceFeatures
,   vulkan-1
)

//:MAKES: F02_vkGetPhysicalDeviceProperties
F02_F01_MACRO(
              vkGetPhysicalDeviceProperties
,   vulkan-1
)

//:MAKES: F02_vkGetPhysicalDeviceQueueFamilyProperties
F02_F01_MACRO(
              vkGetPhysicalDeviceQueueFamilyProperties
,   vulkan-1
)

//:MAKES: F02_vkCreateDevice
F02_F01_MACRO(
              vkCreateDevice
,   vulkan-1
)

//:MAKES:  F02_vkGetDeviceQueue
F02_F01_MACRO( vkGetDeviceQueue , vulkan-1 )

//:MAKES:  F02_vkEnumerateDeviceExtensionProperties
F02_F01_MACRO( vkEnumerateDeviceExtensionProperties , vulkan-1 )

//:----------------------------------------------------------://
//:3 more functions. Added[DATE[2019_01_04]]
//:vkGetPhysicalDeviceSurfaceCapabilitiesKHR : Capabilities  ://
//:vkGetPhysicalDeviceSurfaceFormatsKHR      : Formats       ://
//:vkGetPhysicalDeviceSurfacePresentModesKHR : PresentModes  ://
//:----------------------------------------------------------://


//:MAKES:  F02_vkGetPhysicalDeviceSurfaceCapabilitiesKHR
F02_F01_MACRO( vkGetPhysicalDeviceSurfaceCapabilitiesKHR , 
               vulkan-1 )

//:MAKES:  F02_vkGetPhysicalDeviceSurfaceFormatsKHR
F02_F01_MACRO( vkGetPhysicalDeviceSurfaceFormatsKHR , 
               vulkan-1 )

//:MAKES:  F02_vkGetPhysicalDeviceSurfacePresentModesKHR
F02_F01_MACRO( vkGetPhysicalDeviceSurfacePresentModesKHR , 
               vulkan-1 )
//:----------------------------------------------------------://

//:MAKES:  F02_vkCreateSwapchainKHR
F02_F01_MACRO( vkCreateSwapchainKHR , vulkan-1 )

//:REALIZATION: If the function ends in "KHR"
//:             it is an extension function and
//:             belongs in the file that is loading
//:             extension functions.
//:             EXAMPLE: F50_vkGetSwapchainImagesKHR

////////////////////////////////////////////////////////////////


//!( RegisterWindow   , user32  )  YOU_MADE_THIS_ONE_UP      !//

//[¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯]//
//[__________________________________________________________]//

#else //: F01_BASH_CONCATTED

static void
f01_PrivateInit( void ){

    //:For example purposes. No code here.

}//[;]//

//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

    int F01_Init(){
        printf("[BEG:F01:Init]\n");

        E01_Init(); //: .SUPER_CHAIN();
        f01_PrivateInit();

        printf("[END:F03:Init]\n");
        return( 0 );
    }//[;]//
    int F01_Main(){
        F01_Init();

        //:Nothing to do here.

        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

#endif //: F01_BASH_CONCATTED

//#FILE_REGION[ F.01 ]END#####################################//