//#FILE_REGION[ F.50 ]BEG#####################################//

//:DOTADIW: VK_INST_FUNCS
//:         ( GetVulkanExtensionFunctions )
//:         
//:OUTISDE OF SCOPE:
//:         Proper wrapper code for function pointers.
//:
//:GATHER VULKAN EXTENSION FUNCTIONS.
//:Lets go light on the "macro magic" though.
//:You can save ALMOST as much space without using macros,
//:and end up with much less obfuscated code.


//:PUBLIC Functions Fetched+Loaded in [ F.50 / F50 ]:
//:LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL://

F02_VOF //:<--GenericFunctionPointer
F50_vkCreateDebugUtilsMessengerEXT = NULL;

//:LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL://

////////////////////////////////////////////////////////////////

    //:Private typedef and casted function pointer for
    //:getting instance functions:

    typedef
        F02_VOF //:RET:GenericFuncPtr
        (*f50_PFN_vkGetInstanceProcAddr)(
            void*       vk_instance   /**VkInstance:instance**/
        ,   const char* function_name /**----------:pName   **/
        );

    f50_PFN_vkGetInstanceProcAddr
    f50_FUN_vkGetInstanceProcAddr=NULL;

////////////////////////////////////////////////////////////////
static void //[ #FFAH# ]//
f50_Halt( const char* msg ){ 
    printf( "[f50_Halt]:%s\n", msg ); 
    fflush(stdout); exit(666);
}//[;]//
////////////////////////////////////////////////////////////////


static F02_VOF //:<--returns generic function pointer.
f50_GIPA( /** WRAPPER:vkGetInstanceProcAddr **/
    void*       vk_instance
,   const char* function_name
){
    #define H f50_Halt /////////////////////////////////////////
    if( NULL==vk_instance                   ){ H("[VKI]"); };  
    if( NULL==function_name                 ){ H("[FNN]"); };
    if( NULL==f50_FUN_vkGetInstanceProcAddr ){ H("[FUN]"); };
    #undef  H //////////////////////////////////////////////////

    F02_VOF vulkan_instance_function_address = NULL;

    ////////////////////////////////////////////////////////////



    vulkan_instance_function_address=(
        f50_FUN_vkGetInstanceProcAddr(
            vk_instance   /** instance **/
        ,   function_name /**    pName **/
        )
    );;



    ////////////////////////////////////////////////////////////
    if(NULL==vulkan_instance_function_address){
        f50_Halt("[FTGA]");//:FailedToGetInstanceFunctionAddress
    };;
    return( vulkan_instance_function_address );//:VOID FUNCTION.

}//[;]//

static void
f50_fetchAndLoad_VulkanInstanceFunctions(){
    printf("[BEG:f50_fetchAndLoad_VulkanInstanceFunctions]\n");
    if(NULL==f40_instance){ f50_Halt("[I]"); };
    
        //:Setup function pointer GIPA uses:
        ////////////////////////////////////////////////////////
        f50_FUN_vkGetInstanceProcAddr=(
            (f50_PFN_vkGetInstanceProcAddr)
                 F02_vkGetInstanceProcAddr
        );;
        ////////////////////////////////////////////////////////

        
        //:Begin fetching functions:
        ////////////////////////////////////////////////////////

        if( f40_use_validation_layers > 0 ){

            //:Validation Layer Functions:

            F50_vkCreateDebugUtilsMessengerEXT=f50_GIPA(
                f40_instance
            ,   "vkCreateDebugUtilsMessengerEXT"
            );;
            if(NULL==F50_vkCreateDebugUtilsMessengerEXT){
                f50_Halt("[CDUME:VOF]");
            };;

        };;

        ////////////////////////////////////////////////////////


    printf("[END:f50_fetchAndLoad_VulkanInstanceFunctions]\n");
}//[;]//



//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//
    int F50_Init(){
        printf("[BEG:F50:Init]\n");

            //:Call previous initialiers on chain:
            int ret = F40_Init(); //: ".SUPER()"

            f50_fetchAndLoad_VulkanInstanceFunctions( );

        printf("[END:F50:Init]\n");
        return( ret );
    }//[;]//
    int F50_Main(){
        F50_Init();

            printf("[F50:TO_EXIT:CTRL+C]\n");
            while( 1 ){ }; //:LOOP_FOREVER

        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//





//#FILE_REGION[ F.50 ]END#####################################//