//#FILE_REGION[ F.62 ]BEG#####################################//

int f62_tell_me_everything = 1;

//:DOTADIW: PHYDEV_SELECT
//:        ( vulkan_chapter_seven:         )
//:        (PHYSICAL Device (GPU) Selection)

//:When more confident, we increment file numbers by 2
//:instead of 10. Confident in not making more insertion
//:files between numbers.

//:PUBLIC_VARS: (Forward declarations?)
//:PVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPV://
#define VAR_01 void*
#define VAR_02 struct F20_VkPhysicalDeviceFeatures   ///////////
#define VAR_03 struct F20_VkPhysicalDeviceProperties ///////////
#define VAR_04 struct F20_VkQueueFamilyProperties    ///////////
#define VAR_05 struct F20_VkQueueFamilyProperties    ///////////
#define VAR_06 int                                   ///////////
#define VAR_07 unsigned int                          ///////////
#define VAR_08 unsigned int                          ///////////
#define VAR_09 struct F20_VkSurfaceCapabilitiesKHR   ///////////
#define VAR_10 struct F20_VkSurfaceFormatKHR         ///////////
#define VAR_11 unsigned int /** VkPresentModeKHR **/ ///////////
#define VAR_12 struct F20_VkExtent2D                 ///////////

    VAR_01  F62_physical_device;
    VAR_02  F62_physical_device_features;
    VAR_03  F62_physical_device_properties;

    VAR_04  F62_qfp_graphics  ; //:qfp:queue_family_properties
    VAR_05  F62_qfp_compute   ;
    VAR_06  F62_qfp_graphics_and_compute_are_same_object;

    VAR_07  F62_qfi_graphics  ; //:qfi:queue_family_index
    VAR_08  F62_qfi_compute   ;

    //:C - F - M: Alphabetical order:
    ////////////////////////////////////////////////////////////
    VAR_09  F62_surface_capabilities; //: C : Capabilities
    VAR_10  F62_surface_format;       //: F : Formats
    VAR_11  F62_surface_present_mode; //: M : Modes 
    // ------------------------------------------------------ //
    VAR_12  F62_surface_actual_extent;
    ////////////////////////////////////////////////////////////

#undef  VAR_01  ////////////////////////////////////////////////
#undef  VAR_02  ////////////////////////////////////////////////
#undef  VAR_03  ////////////////////////////////////////////////
#undef  VAR_04  ////////////////////////////////////////////////
#undef  VAR_05  ////////////////////////////////////////////////
#undef  VAR_06  ////////////////////////////////////////////////
#undef  VAR_07  ////////////////////////////////////////////////
#undef  VAR_08  ////////////////////////////////////////////////
#undef  VAR_09  ////////////////////////////////////////////////
#undef  VAR_10  ////////////////////////////////////////////////
#undef  VAR_11  ////////////////////////////////////////////////
#undef  VAR_12  ////////////////////////////////////////////////
//:PVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPVPV://


//:The choosen physical device:
////////////////////////////////////////////////////////////////

    void*
    F62_physical_device = NULL; 
    /** physicalDevice : DEFINE_HANDLE( VkPhysicalDevice ) **/

////////////////////////////////////////////////////////////////

//:Features of the choosen physical device:
////////////////////////////////////////////////////////////////

    struct F20_VkPhysicalDeviceFeatures
    F62_physical_device_features={0};
    
////////////////////////////////////////////////////////////////

//:Properties of the choosen physical device:
////////////////////////////////////////////////////////////////

    struct F20_VkPhysicalDeviceProperties
    F62_physical_device_properties={0};

////////////////////////////////////////////////////////////////

//:Queue Family Properties Of Physical Device:
////////////////////////////////////////////////////////////////

    #define QFP struct F20_VkQueueFamilyProperties  ////////////
            
    QFP     F62_qfp_graphics = { 0 };
    QFP     F62_qfp_compute  = { 0 };
    int     F62_qfp_graphics_and_compute_are_same_object=0;

    #undef QFP /////////////////////////////////////////////////

    //:qfi:Queue_Family_Index:
    #define U32 unsigned int ///////////////////////////////////

            U32     F62_qfi_graphics = (777); //:#ITIV
            U32     F62_qfi_compute  = (888); //:#ITIV#

    #undef  U32 ////////////////////////////////////////////////

////////////////////////////////////////////////////////////////

//:Surface: capabilities, format,  present_mode(s?):
////////////////////////////////////////////////////////////////

    //: C - F - M: Alphabetical Order
    ////////////////////////////////////////////////////////////
    //: C: Capabilities
    //: F: Formats        (surface_formats)
    //: M: Modes          (present_modes  )
    ////////////////////////////////////////////////////////////
    struct F20_VkSurfaceCapabilitiesKHR
    F62_surface_capabilities = { 0 };

    struct F20_VkSurfaceFormatKHR  
    F62_surface_format = { 0 };

    //: VkSurfacePresentMode <<<<<<<< Not a thing.
    //: VkSurfacePresentModeKHR <<<<< Not a thing.
    //: VkPresentModeKHR <<<<<<<<<<<< YES a thing. (unsigned int)
    unsigned int 
    F62_surface_present_mode =( 0xFFFFFFFF );
    ////////////////////////////////////////////////////////////

    struct F20_VkExtent2D 
    F62_surface_actual_extent = { 0 };

////////////////////////////////////////////////////////////////

            
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
/** ---- **/                                        /** ---- **/
/** ---- **/    //:First function always "Halt":    /** ---- **/
/** ---- **/    static void                         /** ---- **/
/** ---- **/    f62_Halt( const char* msg ){        /** ---- **/
/** ---- **/        printf(                         /** ---- **/
/** ---- **/            "[f62_Halt]:%s\n", msg      /** ---- **/
/** ---- **/        );;                             /** ---- **/
/** ---- **/        fflush(stdout); exit(666);      /** ---- **/
/** ---- **/    }//[;]//                            /** ---- **/
/** ---- **/                                        /** ---- **/
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//

//[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP]//
/** ---- **/                                        /** ---- **/
/** ---- **/    //:Debug Printouts.                 /** ---- **/
/** ---- **/    static void                         /** ---- **/
/** ---- **/    f62_Print( const char* msg ){       /** ---- **/
/** ---- **/        int t;                          /** ---- **/
/** ---- **/        t=f62_tell_me_everything;       /** ---- **/
/** ---- **/        if( t <= 0 ){                   /** ---- **/
/** ---- **/            //:Do not print anything.   /** ---- **/
/** ---- **/        }else{                          /** ---- **/
/** ---- **/            printf(                     /** ---- **/
/** ---- **/                "[f62_Print]:%s\n", msg /** ---- **/
/** ---- **/            );;                         /** ---- **/
/** ---- **/            fflush(stdout);             /** ---- **/
/** ---- **/        };;                             /** ---- **/
/** ---- **/    }//[;]//                            /** ---- **/
/** ---- **/                                        /** ---- **/
//[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP]//

static int
f62_isPhysicalDeviceSuitable_HasWantedExtensions( void ){

 if(NULL==F62_physical_device){
        //:EPDTABS:ExpectedPhysicalDeviceToAlreadyBeSet
        f62_Halt("[EPDTABS]");
    };;

    /** uint32_t extensionCount; **/
    struct F20_VkExtensionProperties* extension_array=NULL;
    unsigned int                      extension_count=0;
    ((F03_04)F02_vkEnumerateDeviceExtensionProperties)(
        F62_physical_device
    ,   NULL
    ,  &extension_count
    ,   NULL
    );;

    #define NUM extension_count ////////////////////////////////
    #define SIZ sizeof(struct F20_VkExtensionProperties ) //////

            extension_array = calloc( NUM, SIZ );

    #undef  NUM  ///////////////////////////////////////////////
    #undef  SIZ  ///////////////////////////////////////////////

    ((F03_04)F02_vkEnumerateDeviceExtensionProperties)(
        F62_physical_device
    ,   NULL
    ,  &extension_count
    ,   extension_array
    );;

    if( f62_tell_me_everything > 0 ){
        printf("[extension_count]:%d\n", extension_count);
        if( 69 == extension_count){
            printf("[***********NICE***********]\n");
            fflush(stdout);
        };;
    };;

    int found = 0; //:Bool
    int found_count = 0;
    int missing_count = 0;
    

    //:F61P5:Means "File #61.5" (Between: F61 & F62)
    #define W  F61P5_physical_device_extensions_names_count ////
    #define H  extension_count                              ////
    for( int w = 0; w < (int)W; w++ ){ //:WHAT_WE_WANT
    for( int h = 0; h < (int)H; h++ ){ //:WHAT_WE_HAVE

        //:Reset found on first "h" of loop.
        ////////////////////////////////////////////////////////
        if(0==h){
            found=0;
        };; 
        ////////////////////////////////////////////////////////

        //:Redundant here, but easier to read:
        ////////////////////////////////////////////////////////
        char* wanted_name =(
            //:Could be more accurately named to:
            //:"wanted_physical_device_extension_names"
            //:But it is already verbose enough. And
            //:program will terminate if we don't get what
            //:we want. So effectually, wanted extensions
            //:are extensions we have if program is running.
            F61P5_physical_device_extensions_names[ w ]
        );;

        char*  have_name =(
            extension_array[ h ].extensionName
        );;
        ////////////////////////////////////////////////////////

        //:Core logic. Was match found?
        ////////////////////////////////////////////////////////
        if( 0==strcmp(wanted_name,have_name) ){
            if(found!=0){
                f62_Halt("[DuplicateExtensionsNames?]");
            };;
            found=1;
            found_count++;
        };;
        ////////////////////////////////////////////////////////

        //:Check for found after last "h" in loop:
        ////////////////////////////////////////////////////////
        if( (h+1) == (int)H /**HAVE_LEN**/ ){ //:Last "h"
            if(1!=found){
                //: f62_Halt("[DeviceExtensionNotFound]");
                missing_count++;
            };;
        }else
        if( (h+1)  > (int)H /**HAVE_LEN**/ ){
            f62_Halt("[MyCalculationsAreOff]");
        };;
        ////////////////////////////////////////////////////////
    };;};;

    if( (found_count+missing_count) != W /**WANT_LEN**/ ){
        f62_Halt("[Checksumfail]");
    };;

    #undef  W  /////////////////////////////////////////////////
    #undef  H  /////////////////////////////////////////////////

    if(missing_count != 0){
        return( 0 );
    };;

    return( 1 ); //:TRUE, device suitable

}//[;]//

//:
//: SIDE EFFECT: SETS:
//: capabilities  :vkGetPhysicalDeviceSurfaceCapabilitiesKHR 
//: formats       :vkGetPhysicalDeviceSurfaceFormatsKHR      
//: present modes :vkGetPhysicalDeviceSurfacePresentModesKHR 
static int
f62_isPhysicalDeviceSuitable_SwapChainAdequate( void ){

    //: if( 1 ){ return 1; } //:DEBUG

    #define MACRO_CAP   struct F20_VkSurfaceCapabilitiesKHR ////
    #define MACRO_FMT   struct F20_VkSurfaceFormatKHR       ////
    #define MACRO_MOD          unsigned int                 ////
    ////////////////////////////////////////////////////////////

//- MACRO_CAP* cap_arr = NULL; //:cap: capabilities          -//
//-       int  cap_len =  0  ; SEE: F62_surface_capabilities -//

    MACRO_FMT* fmt_arr = NULL; //:fmt: formats
          int  fmt_len =  0  ;

    MACRO_MOD* mod_arr = NULL; //:mod: present_modes
          int  mod_len =  0  ;

    //:GD: Get Data (That we will parse later in function)
    // GDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGD //
        ////////////////////////////////////////////////////////
        f62_Print("[A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1]");
        //: MACRO_CAP / cap_arr / cap_len:
        ((F03_03)F02_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(
            F62_physical_device
        ,   F61_vulkan_surface
        ,   &( F62_surface_capabilities )
        );;
        f62_Print("[A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2A2]");
        ////////////////////////////////////////////////////////
        f62_Print("[B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1]");
        //: MACRO_FMT / fmt_arr / fmt_len:
        ((F03_04)F02_vkGetPhysicalDeviceSurfaceFormatsKHR)(
            F62_physical_device
        ,   F61_vulkan_surface
        ,   &( fmt_len )
        ,   NULL
        );;

        fmt_arr = calloc( fmt_len, sizeof( MACRO_FMT ) );

        //: MACRO_FMT / fmt_arr / fmt_len:
        ((F03_04)F02_vkGetPhysicalDeviceSurfaceFormatsKHR)(
            F62_physical_device
        ,   F61_vulkan_surface
        ,   &( fmt_len )
        ,      fmt_arr
        );;
        f62_Print("[B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2]");
        ////////////////////////////////////////////////////////
        f62_Print("[C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1]");
        //: MACRO_MOD / mod_arr / mod_len:
        ((F03_04)F02_vkGetPhysicalDeviceSurfacePresentModesKHR)(
            F62_physical_device
        ,   F61_vulkan_surface
        ,   &( mod_len )
        ,   NULL
        );;

        mod_arr = calloc( mod_len, sizeof( MACRO_MOD ) );

        //: MACRO_MOD / mod_arr / mod_len:
        ((F03_04)F02_vkGetPhysicalDeviceSurfacePresentModesKHR)(
            F62_physical_device
        ,   F61_vulkan_surface
        ,   &( mod_len )
        ,      mod_arr
        );;
        f62_Print("[C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2]"); 
        ////////////////////////////////////////////////////////
    // GDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGDGD //

    //:P: Parse Data
    //:S: Set Values
    // PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS //

    //: Figure out VkExtent2D stuff.
    //: VKTUTPDF2018 BOOK_PAGE[ 83 ]
    ////////////////////////////////////////////////////////////
    if( 0xFFFFFFFF != F62_surface_capabilities
                     .currentExtent.width 
        &&
        0xFFFFFFFF != F62_surface_capabilities
                     .currentExtent.height
    ){

        F62_surface_actual_extent = F62_surface_capabilities
                     .currentExtent;

    }else
    if( 0xFFFFFFFF == F62_surface_capabilities
                     .currentExtent.width 
        &&
        0xFFFFFFFF == F62_surface_capabilities
                     .currentExtent.height
    ){
        //:Will have to look at window size, and clamp
        //:the window size between the extent bounds:

        f62_Halt("[WillHaveToClampBetweenMinAndMaxExtent]");

    }else{

        //:value(S): width & height:
        //:One value is max value, the other is not.
        //:which was not expected after reaing vulkan tutorial.

        f62_Halt("[HALF_MAX_WH]");

    };;
        

    ////////////////////////////////////////////////////////////


    //: Select surface format:
    ////////////////////////////////////////////////////////////
    //: Format Wanted:
    //: format: VK_FORMAT_B8G8R8A8_UNORM 
    //: colorspace: VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    #define WANTED_FORMAT     44 /** B8G8R8A8_UNORM      **/
    #define WANTED_COLOR_SPACE 0 /** SRGB_NONLINEAR_KHR  **/
    
    if( fmt_len == 0 ){

        //:No surface formats:
        f62_Halt("[Totally_Fucked]");

    }else
    if( fmt_len == 1 
    &&  fmt_arr[0].format == 0 /** VK_FORMAT_UNDEFINED **/ ){

        //|  The Vulkan API Specification v1.1.111           |//
        //|  changed the behaviour of                        |//
        //|  GetPhysicalDeviceSurfaceFormats. Now it must    |//
        //|  not contain VK_FORMAT_UNDEFINED                 |//
        //|  SOURCE:                                         |//
        //|  github.com/Overv/VulkanTutorial/issues/135      |//

        f62_Halt("[VK_FORMAT_UNDEFINED]");

        //:If undefined, we can pick whatever we want:
        //: struct F20_VkSurfaceFormatKHR F = { 0 };
        //: F.format     = WANTED_FORMAT;
        //: F.colorSpace = WANTED_COLOR_SPACE;

        F62_surface_format.format     = WANTED_FORMAT;
        F62_surface_format.colorSpace = WANTED_COLOR_SPACE;

        //:F62_surface_format = F;

    }else{

        int found=0;
        for( int f = 0; f < fmt_len; f++ ){

            //: struct F20_VkSurfaceFormatKHR 
            //: F=fmt_arr[ f ];

            if( fmt_arr[ f ].format     == WANTED_FORMAT &&
                fmt_arr[ f ].colorSpace == WANTED_COLOR_SPACE
            ){
                F62_surface_format = fmt_arr[ f ];
                found=1;
                break;
            };;
        };;
        if( 1 != found ){
            f62_Halt("[UnableToFindSurfaceFormat]");
        };;
    };;
    ////////////////////////////////////////////////////////////


    //:Only the VK_PRESENT_MODE_FIFO_KHR mode is guaranteed to 
    //:be available,  VKTUTPDF2018 BOOK_PAGE[ 82 ]
    ////////////////////////////////////////////////////////////

    //:FIFO is always guaranteed to exist!
    //:Default if we cannot find anything else.
    F62_surface_present_mode =(
        2 /** VK_PRESENT_MODE_FIFO_KHR  **/
    );;

    //: Unfortunately some drivers currently don’t properly 
    //: support VK_PRESENT_MODE_FIFO_KHR, so we should prefer
    //: VK_PRESENT_MODE_IMMEDIATE_KHR if 
    //: VK_PRESENT_MODE_MAILBOX_KHR is not available:
    //: SOURCE: VKTUTPDF2018 BOOK_PAGE[ 83 ]

    ////////////////////////////////////////////////////////////

    //:Loop through all present modes, find best fit:
    for( int p = 0; p < mod_len; p++ ){

        unsigned int P = 0; /** VkPresentModeKHR **/
        P = mod_arr[ p ]; /** my_present_modes[ p ] **/

        //:First  Choice: (VKTUTPDF2018 BOOK_PAGE[ 83 ])
        if( P == 1 /** VK_PRESENT_MODE_MAILBOX_KHR **/ ){
            F62_surface_present_mode = P;
            break;
        };;

        //:Second Choice: (VKTUTPDF2018 BOOK_PAGE[ 83 ])
        if( P == 0 /** VK_PRESENT_MODE_IMMEDIATE_KHR **/ ){
            F62_surface_present_mode = P;
            break;
        };;

    };;
    ////////////////////////////////////////////////////////////



    // PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS //
    

    free( fmt_arr ); fmt_arr=NULL;
    free( mod_arr ); mod_arr=NULL;
    
    ////////////////////////////////////////////////////////////
    #undef  MACRO_CAP  /////////////////////////////////////////
    #undef  MACRO_FMT  /////////////////////////////////////////
    #undef  MACRO_MOD  /////////////////////////////////////////

    //:Print out the surface formats and things:
    if( f62_tell_me_everything ){

        printf("\n\n");

        //:C: CAPABILITIES:
        //:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC://
        #define SC F62_surface_capabilities ////////////////////
            printf("\n");
            printf("\t[F62_surface_capabilities.]\n");
            printf("\n");

            printf("\t[minImageCount]:%d\n", SC.minImageCount );
            printf("\t[maxImageCount]:%d\n", SC.maxImageCount );

            printf("\t[currentExtent.width]:%d\n", 
                  SC.currentExtent.width );;

            printf("\t[currentExtent.height]:%d\n", 
                  SC.currentExtent.height );;
            
            printf("\n");

        #undef  SC /////////////////////////////////////////////
        #define AE F62_surface_actual_extent ///////////////////

            printf( "\t[F62_surface_actual_extent.width]:%d\n",
                      F62_surface_actual_extent.width );

            printf( "\t[F62_surface_actual_extent.height]:%d\n",
                      F62_surface_actual_extent.height );

        #undef  AE /////////////////////////////////////////////
        //:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC://

        //:M: MODE: (present mode)
        //:MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM://
        printf("\n");
        printf("\t[F62_surface_present_mode]:%d\n",
                 F62_surface_present_mode
        );;
        printf("\t[VK_PRESENT_MODE_MAILBOX_KHR==1]\n");
        //:MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM://

        //:F: FORMAT:
        //:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF://
        printf("\n");
        #define SF  F62_surface_format /////////////////////////

            printf("\t[F62_surface_format.format]:%d\n",
                     F62_surface_format.format );;

            printf("\t[F62_surface_format.colorSpace]:%d\n",
                     F62_surface_format.colorSpace );;

            printf("\t[VK_FORMAT_B8G8R8A8_UNORM=44]\n");
            printf("\t[VK_COLOR_SPACE_SRGB_NONLINEAR_KHR=0]\n");

        #undef  SF /////////////////////////////////////////////
        //:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF://

        printf("\n\n");

    };; /** f62_tell_me_everything **/



    return( 1 ); //:TODO

}//[;]//


static int
f62_isPhysicalDeviceSuitable( void ){

    /** final_cumulative_decision_about_device_suitability **/
    /** final_cumulative_decision **/
    int ret=( /** ret: return final cumulative decision **/
        0-777
    );;

    int A = 0;
    int B = 0;

    A = f62_isPhysicalDeviceSuitable_HasWantedExtensions();


    //:If no swapchain extension ( "VK_KHR_swapchain" )
    //:Then no point in checking further. Also, this check
    //:might result in program termination if A!=1, because
    //:we are querying swapchain details on a device that
    //:does not have swapchain abilities.
    //:------------------------------------------------------://
    //:QUOTE:
    //:SEARCH[ extensionsSupported ]IN[ VKTUTPDF2018]
    //:QUOTE:It is important that we only try to query for swap 
    //:      chain support after verifyingthat the extension 
    //:      is available. BOOK_PAGE[ 80 ]
    ////////////////////////////////////////////////////////////
    if( 1==A ){
        //:Page: 78,79,80. VKTUTPDF2018
        //:SEARCH: "SwapChainSupportDetails"
        B = f62_isPhysicalDeviceSuitable_SwapChainAdequate();
    };;
    ////////////////////////////////////////////////////////////

    if(     1
        &&  1 == A //:HasWantedExtensions
        &&  1 == B //:SwapChainAdequate
    ){
        ret = 1; /** final_cumulative_decision: YES **/
    }else{
        ret = 0; /** final_cumulative_decision: NO! **/
    };;
        
    assert( (0==ret)||(1==ret) ); 
    return( ret ); /** final_cumulative_decision **/
}//[;]//
////////////////////////////////////////////////////////////////

static void
f62_PrivateInitChapterSeven_07( void ){

    unsigned int device_count = 0;

    ((F03_03)F02_vkEnumeratePhysicalDevices)(
        f40_instance
    ,   &device_count
    ,   NULL
    );;

    if( 0==device_count ){
        f62_Halt("[No_Physical_Devices]");
    }else{

        if( f62_tell_me_everything ){
            printf("[WE_HAVE_THIS_MANY_DEVICES]:%d\n"
                ,device_count
            );;fflush(stdout);
        };;
    };;

    //:Skip this bullshit for now, we only have 1 device
    //:on our ZOTAC machine. -[JMIM.2019.12.14]
    if( device_count != 1 ){

        f62_Halt("[MUST_ADD:ChooseCorrectDeviceFromMany]");

        //:ADD the "isDeviceSuitable" method from page 62
        //:of SC[ VKTUTPDF2018 ]
        //:Also see page 77,
        //:which uses vkEnumerateDeviceExtensionProperties

    };;

    

    //:Create temporary device array:
    //:int one = sizeof( void* ); /** one: VkPhysicalDevice **/
    //:int num = device_count;    /** num/amt of elements.  **/
    //:int all = malloc( one * num );
    void** arr = calloc( device_count, sizeof( void* ) );

    ((F03_03)F02_vkEnumeratePhysicalDevices)(
        f40_instance
    ,   &device_count
    ,   arr //:array of devices to populate.
    );;

    //[[  [HACK]:Just take the first device ]]//
    F62_physical_device = arr[ 0 ];

    //:If this ever crashes, may have to un-hardcoded 
    //:our hack and loop over all physical devices.
    ////////////////////////////////////////////////////////////
    f62_Print("[BEG:DONT_YOU_FUCKING_SEGFAULT]\n"); 
    int suitable = f62_isPhysicalDeviceSuitable();
    if(suitable != 1 ){
        f62_Halt("[DeviceWasNotSuitable]");
    }else{
        f62_Print("[DEVICE_WAS_SUITABLE]\n");    
    };;
    f62_Print("[END:DONT_YOU_FUCKING_SEGFAULT]\n"); 
    ////////////////////////////////////////////////////////////

    if( NULL == F62_physical_device ){
        f62_Halt("[OhFuck]");
    }else{
        f62_Print("[WeGotOurPhysicalDeviceBoys!]\n");
    };;

    //:Device Features:
    ////////////////////////////////////////////////////////////
    ((F03_02)F02_vkGetPhysicalDeviceFeatures)(
          F62_physical_device
    ,   &(F62_physical_device_features)
    );;

    if( F62_physical_device_features.shaderInt64 != 1 ){

        f62_Halt("[NOT_SUPPORTED:shaderInt64]");
    
    }else{

        f62_Print("[SUPPORTED:shaderInt64]\n");
    
    };;
    ////////////////////////////////////////////////////////////


    //:Device Properties:
    ////////////////////////////////////////////////////////////
    ((F03_02)F02_vkGetPhysicalDeviceProperties)(
          F62_physical_device
    ,   &(F62_physical_device_properties)
    );;

    int DT = F62_physical_device_properties.deviceType;
    if( 11 
        && (1 != DT) //:VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU 
        && (2 != DT) //:VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU 
        && (3 != DT) //:VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU 
    ){

        f62_Halt("[I_NEED_A_FUCKING_GPU]");
    
    }else{

        f62_Print("[I_HAVE_A_FUCKING_GPU]\n");
    
    };;

        //:Id like to see what my texture limit is:
        ////////////////////////////////////////////////////////

        int lim =( F62_physical_device_properties.
                   limits.maxImageDimension2D );;

        if( f62_tell_me_everything > 0 ){
            printf("[maxImageDimension2D]:%d\n", lim); //:16384
            //: 16384 / 2 == 8192
            //:  8192 / 2 == 4096
            //:  4096 / 2 == 2048
            //:  2048 / 2 == 1024
            //:  1024 / 2 == 512
            //:   512 / 2 == 256 ......
        };;

        ////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////

    //:Queue Families:
    ////////////////////////////////////////////////////////////

        //:Making assumption that opaque handle would not
        //:evaluate to [ NULL | 0 ] if valid.
        if(NULL == F62_physical_device){
            f62_Halt("[NULL:PD]");
        };;
        if(NULL== F02_vkGetPhysicalDeviceQueueFamilyProperties){
            f62_Halt("[NULL:GET_PDQFP]");
        };;
            
        struct F20_VkQueueFamilyProperties*
        qfp_arr=NULL;
        
        unsigned int
        qfp_num = 0;
        
        ((F03_03)F02_vkGetPhysicalDeviceQueueFamilyProperties)(
        
            F62_physical_device
        
        ,           &( qfp_num )
        ,   NULL    //:qfp_arr
        );;
        
        //:Allocate Space For qfp objects:
        //:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC://

            if( f62_tell_me_everything > 0 ){
                printf("[qfp_num]:%d\n", qfp_num );
                fflush(stdout);
            };;

        int qfp_one = sizeof( 
            struct F20_VkQueueFamilyProperties
        );;
        qfp_arr = calloc( qfp_num, qfp_one );
        if(NULL==qfp_arr){ f62_Halt("[FUCK_01]"); };
        //:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC://

        ((F03_03)F02_vkGetPhysicalDeviceQueueFamilyProperties)(
        
            F62_physical_device
        
        ,           &( qfp_num )
        ,              qfp_arr
        );;

        if(NULL==qfp_arr){ f62_Halt("[FUCK_02]"); };

        if( f62_tell_me_everything > 0 ){
            printf("[qfp_arr[0].queueFlags]:%d\n"
            ,        qfp_arr[0].queueFlags
            );;fflush(stdout);;
        };;

        //:LOOP:
        //:LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL://

        F62_qfp_graphics_and_compute_are_same_object=0;
        int found_graphics = 0;
        int found_compute  = 0;

        struct F20_VkQueueFamilyProperties cur = {0};
      //struct F20_VkQueueFamilyProperties emp = {0};
        for(int dex = 0; dex < (int)qfp_num; dex++ ){
        
            //:Copy memory into cur to take a look:
            cur = qfp_arr[ dex ];
        
            unsigned int f = cur.queueFlags;
            unsigned int c = cur.queueCount;

            if( f62_tell_me_everything > 0 ){
                printf("\n");
            
                    printf("[dex]:%d\n", dex );
                    printf("[f,c]:(%d)(%d)\n", f,c);
            
                printf("\n");
            };;

            if( 0==(f|c) ){
                f62_Halt("[DataNotLoaded]");
            };;

            //: VK_QUEUE_GRAPHICS_BIT : 0x00000001
            //: VK_QUEUE_COMPUTE_BIT  : 0x00000002
            if( cur.queueFlags & 0x00000001 ){ //:Graphics
            if( cur.queueFlags & 0x00000002 ){ //:Compute

                F62_qfp_graphics = cur;
                F62_qfp_compute  = cur;
                F62_qfp_graphics_and_compute_are_same_object=1;
                
                found_graphics=1;
                found_compute =1;

                F62_qfi_graphics = dex;
                F62_qfi_compute  = dex;

                break; 
            };;};;

            if( cur.queueFlags & 0x00000001 ){ //:Graphics
                F62_qfp_graphics = cur;
                  found_graphics = 1;
                F62_qfi_graphics = dex;
            };;
            if( cur.queueFlags & 0x00000002 ){ //:Compute
                F62_qfp_compute  = cur;
                  found_compute  = 1;
                F62_qfi_compute  = dex;
            };; 
                
        };;fflush(stdout);

        if(0==(found_graphics|found_compute)){
            f62_Halt("[DidNotFindBoth:QFP]");
        }else{
            if( f62_tell_me_everything > 0 ){
                printf("[QFP(s):Found]");
                fflush(stdout);
            };;
        };;

        //:LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL://

    ////////////////////////////////////////////////////////////
    
    free( qfp_arr );
    free( arr     );
    return;
}//[;]//

////////////////////////////////////////////////////////////////

//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//
    int F62_Init(){
        printf("[BEG:F62:Init]\n");

            ////////////////////////////////////////////////////

            //: ".SUPER_CHAIN()"
         //:int ret = F61_Init(); 
            int ret = F61P5_Init();

            //: LAST_ITEM_IN_CODE_CHAIN:
            f62_PrivateInitChapterSeven_07();

            ////////////////////////////////////////////////////

        printf("[END:F62:Init]\n");
        return( ret );
    }//[;]//
    int F62_Main(){

        printf("[F62_Main:Before:F62_Init()]\n");
        ////////////////////////////////////////////////////////

        F62_Init();

        ////////////////////////////////////////////////////////
        printf("[F62_Main:Afterr:F62_Init()]\n");


        
        //:RLSI:RENDER_LOOP_STAND_IN
        ////////////////////////////////////////////////////////

        printf("[F62:TO_EXIT:CTRL+C]\n");
        fflush(stdout );
        while( 1 ){ }; //:LOOP_FOREVER

        ////////////////////////////////////////////////////////

        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//


    //: #ITIV# : Init_To_Invalid_Value

//#FILE_REGION[ F.62 ]END#####################################//
