//#FILE_REGION[ F.02 ]BEG#####################################//

//[ DOTADIW: DLL_FUNC_LOAD ----------------------------------]//
//[          Load Function Pointers From DLL FIles.          ]//
//[         (DLL files or linux equivalent)                  ]//
//[                                                          ]//
//[ Example Function Pointer Created By This File:           ]//
//[                                                          ]//
//[         F02_VOF F02_DestroyWindow =<SomeDLLAddress>      ]//

#include <string.h> //: strcmp

//:Generic_Function_Pointer
typedef void (*F02_VOF)(void);


//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//

void F02_Halt( const char* msg ){ 
    printf( "[F02_Halt]:%s\n", msg ); 
    fflush(stdout); exit(666);
}//[;]//

int F02_Same( const char* str_01, const char* str_02 ){
    return( 0 == strcmp( str_01, str_02 ) );
}//[;]//

//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//

    

    //[ Declare void pointers for every single DLL function  ]//
    //[ you want to call. They will be wrapped by functions  ]//
    //[ in a later file. Or called by casting to correct     ]//
    //[ signature on the fly.                                ]//
    #define F02_F01_MACRO(f,d) F02_VOF  F02_  ##  f ;
            #include "./F.01" //:<--[[[DOTADIW:DLL_FUNC_LIST]]]
    #undef  F02_F01_MACRO

    //:Create dummy F01_ functions to let you know
    //:you are wrong and should be calling F02_ functions.
    #define F02_F01_MACRO(f,d) F02_VOF  F01_  ##  f ;
        #include "./F.01" //:<--[[[DOTADIW:DLL_FUNC_LIST]]]
    #undef  F02_F01_MACRO

////////////////////////////////////////////////////////////////
//:Positive: The index of the loaded dll address in array.
//:Negative: The index to insert/cache next dll.
//:DO NOT USE TO PEEK! When returning negative, expects you
//:to add to the cache array.
#define MACRO_STR const char * /////////////////////////////////
static DLLL_DLIB F02_Cache_ADDR[1+10]={0}; //:DLL_CACHE.address
static MACRO_STR F02_Cache_NAME[1+10]={0}; //:DLL_CACHE.name
int F02_GetCacheIndex( const char* dlib_name ){

    int i = 0;while(1){ i++;
        
        assert( 0 != i ); //:Invalid_Cache_Index
        assert( i <= 10); //:Out_Of_Pre_Allocated_Slots

        if( NULL ==    F02_Cache_ADDR[i]){ return(  0-i  ); }
        if( F02_Same(  F02_Cache_NAME[i], dlib_name  )   ){
            return( i );
        };;

    };;

    assert( 0 ); //:CRASH! Should have returned already!
    return( 0 ); //:Return invalid index.

}//[;]//
#undef MACRO_STR ///////////////////////////////////////////////

int F02_GF_total_number_of_functions_fetched=0;
static F02_VOF F02_GF( //:GF:Get_Function(Pointer)
/**/    const char* func_name //:EX:"ShowWindow"
/**/,   const char* dlib_name //:EX:"user32.dll" | "user32"
){
    DLLL_DLIB  dlib_addr; //:DLL Module   Address
    DLLL_FUNC  func_addr; //:DLL Function Address
    ////////////////////////////////////////////////////////////
    //:GET DLL Module:
    ////////////////////////////////////////////////////////////
    int cac_dex = F02_GetCacheIndex( dlib_name );
    if( cac_dex > 0 ){

        dlib_addr = F02_Cache_ADDR[ cac_dex ];

    }else
    if( cac_dex < 0 ){

        dlib_addr = DLLL_LoadLibraryA(
        dlib_name );;

        F02_Cache_ADDR[ 0-cac_dex ] = dlib_addr;
        F02_Cache_NAME[ 0-cac_dex ] = dlib_name;

    }else{
        F02_Halt( "[EUBOC:ZERO_IS_INVALID_CACHE_INDEX]" );
    };;
    ////////////////////////////////////////////////////////////
    //:PULL Function From DLL:
    ////////////////////////////////////////////////////////////

        func_addr = DLLL_GetProcAddress( dlib_addr, func_name );

    ////////////////////////////////////////////////////////////

    F02_GF_total_number_of_functions_fetched++;
    return( (F02_VOF)func_addr );

}//[;]//

void F02_WRONGNAME(void){

    printf("[Raw_Function_Pointers_Are_Named]\n");
    printf("[After_The_File_They_Are_Created]\n");
    printf("[in.(F.02)not_the_file_the_func_]\n");
    printf("[name_list_lives_in(F.01).------]\n");
    printf("[TL;DR::::::::::::::::::::::::::]\n");
    printf("[   YES: F02_SomeRawDLLFunction ]\n");
    printf("[    NO: F01_SomeRawDLLFunction ]\n");

    fflush(stdout);
    exit(666);

}//[;]//

//:Load Function Pointers: EX: F02_ShowWindow
int F02_Init(){
    printf("[BEG:F02:Init]\n");

    //:Call previous "init" before doing your work:
    F01_Init();

    #define F02_F01_MACRO(f,d) F02_ ## f = F02_GF(#f,#d);
            #include "./F.01" //:<--[[[DOTADIW:DLL_FUNC_LIST]]]
    #undef  F02_F01_MACRO

    //:In case you think the functions start with "F01_"
    #define F02_F01_MACRO(f,d) F01_ ## f = &(F02_WRONGNAME);
            #include "./F.01" //:<--[[[DOTADIW:DLL_FUNC_LIST]]]
    #undef  F02_F01_MACRO

    if( F02_GF_total_number_of_functions_fetched != 22 ){
        F02_Halt("[Expected_This_Many_Fetched_Funcs]");
    };;


    printf("[END:F02:Init]\n");
    return( 0 );

}//[;]//
int F02_Main(){

    printf("[F02_Init:Will_Fetch_Function_Pointers]\n");
    int ret = F02_Init();

    return( ret );
}//[;]//



//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//


//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//|////////////////////////////////////////////|////[ --64-- ]//
//|     -///-                        -///-     |////[ --64-- ]//
//|....(( 0 ))|| ||_ _--  --_ _|| ||(( 0 ))....|////[ --64-- ]//
//|_  __      __  __  __  __  __  __      __  _|////[ --64-- ]//
//| \/  \    /  \/  \/  \/  \/  \/  \    /  \/ |////[ --64-- ]//
//|      \  /                        \  /      |////[ --64-- ]//
//|       \/                          \/       |////[ --64-- ]//
//+ BEG: #BOTTOM_OF_FILE_COMMENTS_SECTION#     +////[ --64-- ]//
//|           /\                  /\           |////[ --64-- ]//
//|          /  \                /  \          |////[ --64-- ]//
//|_--__--__/    \__/\__/\__/\__/    \__--__--_|////[ --64-- ]//
//|                                            |////[ --64-- ]//
//|       ______________________________       |////[ --64-- ]//
//|______/                              \______|////[ --64-- ]//
#if(BOTTOM_OF_FILE_COMMENTS_SECTION) /////////////
/** ****************************************** |||
                                                   
//+----------------------------------------------------------+//
//[ Because macros generate these functions, I thought it    ]//
//[ a good idea to write them down here in a comment.        ]//
//[ If I don't, "CTRL+F" will not save the poor soul         ]//
//[ looking for the declaration of these functions.          ]//
//[ (They are declared in this file (F.02) with macros)      ]//
//[                                                          ]//
//|     void*( *F02_RegisterClassExW )( void );              |//
//|     void*( *F02_CreateWindowExW  )( void );              |//
//|     void*( *F02_DestroyWindow    )( void );              |//
//|     void*( *F02_PostQuitMessage  )( void );              |//
//|     void*( *F02_DefWindowProcW   )( void );              |//
//|     void*( *F02_LoadIconA        )( void );              |//
//|     void*( *F02_LoadCursorA      )( void );              |//
//|     void*( *F02_GetWindowDC      )( void );              |//
//|     void*( *F02_ChoosePixelFormat)( void );              |//
//|     void*( *F02_SetPixelFormat   )( void );              |//
//|     void*( *F02_GetModuleHandleW )( void );              |//
//|     void*( *F02_GetDesktopWindow )( void );              |//
//|     void*( *F02_TranslateMessage )( void );              |//
//|     void*( *F02_DispatchMessageW )( void );              |//
//|     void*( *F02_PeekMessageW     )( void );              |//
//|     void*( *F02_ShowWindow       )( void );              |//
//|     void*( *F02_UpdateWindow     )( void );              |//
//|     void*( *F02_SetFocus         )( void );              |//
//|     void*( *F02_Sleep            )( void );              |//
//|     void*( *F02_GetProcessHeap   )( void );              |//
//|     void*( *F02_CreateThread     )( void );              |//
//|     void*( *F02_HeapAlloc        )( void );              |//
//+----------------------------------------------------------+//
                                                   
||| ****************************************** **/ 
#endif ///////////////////////////////////////////
//|______                                ______|////[ --64-- ]//
//|||||||\______________________________/|||||||////[ --64-- ]//
//|                                            |////[ --64-- ]//
//|....(( 0 ))|| ||_ _--  --_ _|| ||(( 0 ))....|////[ --64-- ]//
//|_  __      __  __  __  __  __  __      __  _|////[ --64-- ]//
//| \/  \    /  \/  \/  \/  \/  \/  \    /  \/ |////[ --64-- ]//
//|      \  /                        \  /      |////[ --64-- ]//
//|       \/                          \/       |////[ --64-- ]//
//+ END: #BOTTOM_OF_FILE_COMMENTS_SECTION#     +////[ --64-- ]//
//|           /\                  /\           |////[ --64-- ]//
//|          /  \                /  \          |////[ --64-- ]//
//|_--__--__/    \__/\__/\__/\__/    \__--__--_|////[ --64-- ]//
//|                                            |////[ --64-- ]//
//|____________________________________________|////[ --64-- ]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//
//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//



//#FILE_REGION[ F.02 ]END#####################################//