//#FILE_REGION[ F.20 ]BEG#####################################//

//: DOTADIW: VULKAN_STRUCT
//: (ALSO SEE: F.35: Structs that take function pointers)
//: (Declarations, no instantiation!)

//:何:Whatever
//:void* types (via DECLARE_HANDLE( 何 ) ) <<Right Name?
//:UI64  types:(via VK_DEFINE_NON_DISPATCHABLE_HANDLE( 何 ))
//[ F20_VkDebugUtilsMessengerEXT ====== void*  ]//
//[ F20_VkDeviceSize ================== UI64   ]// [✓]
//[ F20_VkSurfaceKHR ================== void*  ]//
//[ F20_VkSwapchainKHR ================ UI64   ]//
//[ F20_VkImage        ================

struct F20_VkApplicationInfo {
    unsigned int       sType; //:VkStructureType
    const void*        pNext;
    const char*        pApplicationName;
    unsigned int       applicationVersion; //:uint32_t
    const char*        pEngineName;
    unsigned int       engineVersion;      //:unsigned int
    unsigned int       apiVersion;         //:unsigned int
};//[struct]//

struct F20_VkInstanceCreateInfo {
    unsigned int                sType; //:VkStructureType
    const void*                 pNext;
    unsigned int                flags;

    const struct F20_VkApplicationInfo*    
                      pApplicationInfo;

    unsigned int                enabledLayerCount;
    const char* const*          ppEnabledLayerNames;

    //:Is "const char**" same as "const char* const*" ?
    //:In fact.. Both are "char**" with extra constraints.

    unsigned int                enabledExtensionCount;
    const char* const*          ppEnabledExtensionNames;

};//[struct]//

struct F20_VkExtensionProperties {

    char        
    extensionName[ 

        256 /**VK_MAX_EXTENSION_NAME_SIZE**/ 

    ];

    unsigned int /** uint32_t **/    
    specVersion;

};//[struct]//

struct F20_VkLayerProperties {
    
    #define MACRO_A 256 //:VK_MAX_EXTENSION_NAME_SIZE
    #define MACRO_B 256 //:VK_MAX_DESCRIPTION_SIZE

    char            layerName[   MACRO_A ];//:MAX_EXT
    unsigned int    specVersion;
    unsigned int    implementationVersion;
    char            description[ MACRO_B ];//:MAX_DSC

    #undef MACRO_A
    #undef MACRO_B

};//[struct]//

struct 
F20_VkDebugUtilsLabelEXT {
    unsigned int       sType; /** VkStructureType **/
    const void*        pNext;
    const char*        pLabelName;
    float              color[4];
};//[struct]//

struct 
F20_VkDebugUtilsObjectNameInfoEXT {
    unsigned int         sType;        /** VkStructureType **/
    const   void*        pNext;
    unsigned int         objectType;   /** VkObjectType    **/
    unsigned long long   objectHandle; /** uint64_t        **/
    const char*          pObjectName;
};

////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////

struct 
F20_VkDebugUtilsMessengerCallbackDataEXT {

    unsigned int /** VkStructureType **/
    sType;

    const void*                                  
    pNext;

    /** VkDebugUtilsMessengerCallbackDataFlagsEXT **/ 
    unsigned int    
    flags;

    const char*                                  
    pMessageIdName;

    signed int /** int32_t **/                                      
    messageIdNumber;

    const char*                                  
    pMessage;

    unsigned int /** uint32_t **/                                     
    queueLabelCount;

    const struct F20_VkDebugUtilsLabelEXT*                  
    pQueueLabels;

    unsigned int /** uint32_t **/                                     
    cmdBufLabelCount;

    const struct F20_VkDebugUtilsLabelEXT*                  
    pCmdBufLabels;

    unsigned int /** uint32_t **/                                     
    objectCount;

    const struct F20_VkDebugUtilsObjectNameInfoEXT*         
    pObjects;

};

//+----------------------------------------------------------+//
//|                                                          |//
//|          www.khronos.org/registry/vulkan/specs/          |//
//|          1.1-extensions/man/html/                        |//
//|          VkPhysicalDeviceFeatures.html                   |//
//|                                                          |//
//+----------------------------------------------------------+//
/** UI32  =~=  typedef uint32_t VkBool32 **/ ///////////////////
#define UI32 unsigned int //////////////////////////////////////
struct F20_VkPhysicalDeviceFeatures {

        UI32    robustBufferAccess;
        UI32    fullDrawIndexUint32;
        UI32    imageCubeArray;
        UI32    independentBlend;
        UI32    geometryShader;
        UI32    tessellationShader;
        UI32    sampleRateShading;
        UI32    dualSrcBlend;
        UI32    logicOp;
        UI32    multiDrawIndirect;
        UI32    drawIndirectFirstInstance;
        UI32    depthClamp;
        UI32    depthBiasClamp;
        UI32    fillModeNonSolid;
        UI32    depthBounds;
        UI32    wideLines;
        UI32    largePoints;
        UI32    alphaToOne;
        UI32    multiViewport;
        UI32    samplerAnisotropy;
        UI32    textureCompressionETC2;
        UI32    textureCompressionASTC_LDR;
        UI32    textureCompressionBC;
        UI32    occlusionQueryPrecise;
        UI32    pipelineStatisticsQuery;
        UI32    vertexPipelineStoresAndAtomics;
        UI32    fragmentStoresAndAtomics;
        UI32    shaderTessellationAndGeometryPointSize;
        UI32    shaderImageGatherExtended;
        UI32    shaderStorageImageExtendedFormats;
        UI32    shaderStorageImageMultisample;
        UI32    shaderStorageImageReadWithoutFormat;
        UI32    shaderStorageImageWriteWithoutFormat;
        UI32    shaderUniformBufferArrayDynamicIndexing;
        UI32    shaderSampledImageArrayDynamicIndexing;
        UI32    shaderStorageBufferArrayDynamicIndexing;
        UI32    shaderStorageImageArrayDynamicIndexing;
        UI32    shaderClipDistance;
        UI32    shaderCullDistance;
        UI32    shaderFloat64;
        UI32    shaderInt64;
        UI32    shaderInt16;
        UI32    shaderResourceResidency;
        UI32    shaderResourceMinLod;
        UI32    sparseBinding;
        UI32    sparseResidencyBuffer;
        UI32    sparseResidencyImage2D;
        UI32    sparseResidencyImage3D;
        UI32    sparseResidency2Samples;
        UI32    sparseResidency4Samples;
        UI32    sparseResidency8Samples;
        UI32    sparseResidency16Samples;
        UI32    sparseResidencyAliased;
        UI32    variableMultisampleRate;
        UI32    inheritedQueries;

};

#undef  UI32 ///////////////////////////////////////////////////

////////////////////////////////////////////////////////////////


#define I_32   signed int  /////////////////////////////////////
#define UI32 unsigned int  /////////////////////////////////////
#define UI64 unsigned long long ////////////////////////////////
#define FLOT float /////////////////////////////////////////////

struct F20_VkPhysicalDeviceLimits {

    //:ImageDimension:
    UI32    maxImageDimension1D;
    UI32    maxImageDimension2D;
    UI32    maxImageDimension3D;
    UI32    maxImageDimensionCube;

    //:max.... whatever.
    UI32    maxImageArrayLayers;
    UI32    maxTexelBufferElements;
    UI32    maxUniformBufferRange;
    UI32    maxStorageBufferRange;
    UI32    maxPushConstantsSize;
    UI32    maxMemoryAllocationCount;
    UI32    maxSamplerAllocationCount;

    
    UI64    bufferImageGranularity; /** VkDeviceSize **/
    UI64    sparseAddressSpaceSize; /** VkDeviceSize **/

    //:DescriptorSets (PLURAL)
    //:DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD://

    //:Max number of descriptor sets that can 
    //:be simultaneously used by a pipeline. 
    UI32    maxBoundDescriptorSets;

    //:Descriptor
    UI32        maxPerStageDescriptorSamplers;
    UI32        maxPerStageDescriptorUniformBuffers;
    UI32        maxPerStageDescriptorStorageBuffers;
    UI32        maxPerStageDescriptorSampledImages;
    UI32        maxPerStageDescriptorStorageImages;
    UI32        maxPerStageDescriptorInputAttachments;

    //:Max number of resources that can be accessible 
    //:to a single shader stage in a pipeline layout.
    UI32    maxPerStageResources;

    //:DescriptorSet:
    UI32        maxDescriptorSetSamplers;
    UI32        maxDescriptorSetUniformBuffers;
    UI32        maxDescriptorSetUniformBuffersDynamic;
    UI32        maxDescriptorSetStorageBuffers;
    UI32        maxDescriptorSetStorageBuffersDynamic;
    UI32        maxDescriptorSetSampledImages;
    UI32        maxDescriptorSetStorageImages;
    UI32        maxDescriptorSetInputAttachments;

    //:DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD://

    //:Vertex:
    UI32    maxVertexInputAttributes;
    UI32    maxVertexInputBindings;
    UI32    maxVertexInputAttributeOffset;
    UI32    maxVertexInputBindingStride;
    UI32    maxVertexOutputComponents;

    //:Tessellation:
    UI32    maxTessellationGenerationLevel;
    UI32    maxTessellationPatchSize;
    UI32    maxTessellationControlPerVertexInputComponents;
    UI32    maxTessellationControlPerVertexOutputComponents;
    UI32    maxTessellationControlPerPatchOutputComponents;
    UI32    maxTessellationControlTotalOutputComponents;
    UI32    maxTessellationEvaluationInputComponents;
    UI32    maxTessellationEvaluationOutputComponents;

    //:Geometry:
    UI32    maxGeometryShaderInvocations;
    UI32    maxGeometryInputComponents;
    UI32    maxGeometryOutputComponents;
    UI32    maxGeometryOutputVertices;
    UI32    maxGeometryTotalOutputComponents;

    //:Fragment:
    UI32    maxFragmentInputComponents;
    UI32    maxFragmentOutputAttachments;
    UI32    maxFragmentDualSrcAttachments;
    UI32    maxFragmentCombinedOutputResources;

    //:Compute:
    UI32    maxComputeSharedMemorySize;
    UI32    maxComputeWorkGroupCount[3];
    UI32    maxComputeWorkGroupInvocations;
    UI32    maxComputeWorkGroupSize[3];

    //:PrecisionBits
    UI32    subPixelPrecisionBits;
    UI32    subTexelPrecisionBits;
    UI32    mipmapPrecisionBits;

    UI32    maxDrawIndexedIndexValue;
    UI32    maxDrawIndirectCount;
   
    FLOT    maxSamplerLodBias;
    FLOT    maxSamplerAnisotropy;

    UI32    maxViewports;
    UI32    maxViewportDimensions[2];

    FLOT    viewportBoundsRange[2];
    
    UI32    viewportSubPixelBits;
    
    UI64    minMemoryMapAlignment; /** size_t type **/

    //:VkDeviceSize: UI64 (unsigned long long)
    //:[ _____________ BufferOffsetAlignment ]            
    ////////////////////////////////////////////////////////////
                                                           /////
                                                           /////
    UI64      minTexelBufferOffsetAlignment;   //:SEE_01   /////
    UI64    minUniformBufferOffsetAlignment;   //:SEE_02   /////
    UI64    minStorageBufferOffsetAlignment;   //:SEE_03   /////
                                                           /////
            //: SEE_01: VkBufferViewCreateInfo             /////
            //: SEE_02: VkDescriptorBufferInfo             /////
            //: SEE_03: VkDescriptorBufferInfo             /////
                                                           /////
    ////////////////////////////////////////////////////////////

    I_32    minTexelOffset;
    UI32    maxTexelOffset;

    I_32    minTexelGatherOffset;
    UI32    maxTexelGatherOffset;

    FLOT    minInterpolationOffset;
    FLOT    maxInterpolationOffset;

    UI32    subPixelInterpolationOffsetBits;

    UI32    maxFramebufferWidth;
    UI32    maxFramebufferHeight;
    UI32    maxFramebufferLayers;

    //: VkSampleCountFlags: UI32 ///////////////////////////////
    ////////////////////////////////////////////////////////////
                                                   /////////////
    UI32    framebufferColorSampleCounts        ;  /////////////
    UI32    framebufferDepthSampleCounts        ;  /////////////
    UI32    framebufferStencilSampleCounts      ;  /////////////
    UI32    framebufferNoAttachmentsSampleCounts;  /////////////
                                                   /////////////
    ////////////////////////////////////////////////////////////

    UI32    maxColorAttachments; /** uint32_t **/

    //: VkSampleCountFlags: UI32 ///////////////////////////////
    ////////////////////////////////////////////////////////////
                                              //////////////////
    UI32    sampledImageColorSampleCounts  ;  //////////////////
    UI32    sampledImageIntegerSampleCounts;  //////////////////
    UI32    sampledImageDepthSampleCounts  ;  //////////////////
    UI32    sampledImageStencilSampleCounts;  //////////////////
    UI32    storageImageSampleCounts       ;  //////////////////
                                              //////////////////
    ////////////////////////////////////////////////////////////

    //:uint32_t: UI32 ( unsigned int )
    ////////////////////////////////////////////////////////////

    UI32    maxSampleMaskWords;

    ////////////////////////////////////////////////////////////

    //:VkBool32: UI32
    ////////////////////////////////////////////////////////////

    UI32    imestampComputeAndGraphics;

    ////////////////////////////////////////////////////////////

    FLOT    timestampPeriod;

    //:uint32_t: UI32 ( unsigned int )
    ////////////////////////////////////////////////////////////

    UI32    maxClipDistances;
    UI32    maxCullDistances;
    UI32    maxCombinedClipAndCullDistances;
    UI32    discreteQueuePriorities;

    ////////////////////////////////////////////////////////////

    FLOT    pointSizeRange[2];
    FLOT    lineWidthRange[2];
    FLOT    pointSizeGranularity;
    FLOT    lineWidthGranularity;

    //:VkBool32: UI32
    ////////////////////////////////////////////////////////////

    UI32    strictLines;
    UI32    standardSampleLocations;

    ////////////////////////////////////////////////////////////

    //:VkDeviceSize: UI64 ( unsigned long long )
    ////////////////////////////////////////////////////////////

    UI64    optimalBufferCopyOffsetAlignment;
    UI64    optimalBufferCopyRowPitchAlignment;
    UI64    nonCoherentAtomSize;

    ////////////////////////////////////////////////////////////
};
#undef  I_32  //////////////////////////////////////////////////
#undef  UI32  //////////////////////////////////////////////////
#undef  UI64  //////////////////////////////////////////////////
#undef  FLOT  //////////////////////////////////////////////////

////////////////////////////////////////////////////////////////

struct F20_VkPhysicalDeviceSparseProperties {

    //:residency:
    //:    An object is considered to be resident 
    //:    when it is accessible by the GPU. -MSDN
   
    #define UI32 unsigned int //////////////////////////////////

            /////// residency //////////////////////////////////
            UI32    residencyStandard2DBlockShape;
            UI32    residencyStandard2DMultisampleBlockShape;
            UI32    residencyStandard3DBlockShape;
            UI32    residencyAlignedMipSize;
            UI32    residencyNonResidentStrict;
            /////// residency //////////////////////////////////

    #undef  UI32 ///////////////////////////////////////////////
};

////////////////////////////////////////////////////////////////

struct F20_VkPhysicalDeviceProperties {

    unsigned int /** uint32_t **/ apiVersion;
    unsigned int /** uint32_t **/ driverVersion;
    unsigned int /** uint32_t **/ vendorID;
    unsigned int /** uint32_t **/ deviceID;

    unsigned int /** enum VkPhysicalDeviceType **/                
    deviceType;

    char                                
    deviceName[ 256 /** VK_MAX_PHYSICAL_DEVICE_NAME_SIZE **/ ];

    unsigned char /** uint8_t **/              
    pipelineCacheUUID[ 16 /** VK_UUID_SIZE **/ ];

    struct F20_VkPhysicalDeviceLimits              
    limits;

    struct F20_VkPhysicalDeviceSparseProperties    
    sparseProperties;

} VkPhysicalDeviceProperties;

struct F20_VkExtent3D {

    #define UI32 unsigned int //////////////////////////////////
            UI32    width ;
            UI32    height;
            UI32    depth ;
    #undef  UI32 ///////////////////////////////////////////////
};

struct F20_VkQueueFamilyProperties {
    unsigned int    queueFlags; /** VkQueueFlags --> VkFlags **/
    unsigned int    queueCount;          /** uint32_t **/
    unsigned int    timestampValidBits;  /** uint32_t **/
    
    struct F20_VkExtent3D  
    minImageTransferGranularity;
};

struct F20_VkDeviceQueueCreateInfo {
    unsigned int   sType; /** VkStructureType **/
    const void*    pNext; 
    unsigned int   flags; /** VkDeviceQueueCreateFlags **/

    unsigned int   queueFamilyIndex; /** uint32_t **/
    unsigned int   queueCount      ; /** uint32_t **/
    const float*   pQueuePriorities;
};

//:For creating "Logical" device.
struct F20_VkDeviceCreateInfo{
    unsigned int                       sType; /** VkStructureType **/
    const void*                        pNext;
    unsigned int                       flags; /** VkDeviceCreateFlags **/

    // ------------------------------------------------------ //

    unsigned int /** uint32_t **/                           
    queueCreateInfoCount;

    const struct F20_VkDeviceQueueCreateInfo*     
    pQueueCreateInfos;
    
    // ------------------------------------------------------ //

    unsigned int                       enabledLayerCount;

    //:Just a read only char** (List of strings):
    const char* const*                 ppEnabledLayerNames;

    unsigned int                       enabledExtensionCount;

    //:Another read-only char** (List Of Strings):
    const char* const*                 ppEnabledExtensionNames;

    //:
    const struct F20_VkPhysicalDeviceFeatures*    
    pEnabledFeatures;
};

//: VkWin32SurfaceCreateInfoKHR 
struct 
F20_VkWin32SurfaceCreateInfoKHR{

    unsigned int    sType; /** VkStructureType **/
    const void*     pNext;
    unsigned int    flags; /** VkWin32SurfaceCreateFlagsKHR **/
    void*       hinstance; /** HINSTANCE **/
    void*            hwnd; /** HWND      **/

};//

struct F20_VkExtent2D {
    unsigned int /** uint32_t **/    width;
    unsigned int /** uint32_t **/    height;
};

struct F20_VkSurfaceCapabilitiesKHR {
    unsigned int /** uint32_t **/   minImageCount;
    unsigned int /** uint32_t **/   maxImageCount;

    struct F20_VkExtent2D           currentExtent;
    struct F20_VkExtent2D           minImageExtent;
    struct F20_VkExtent2D           maxImageExtent;

    unsigned int /** uint32_t **/  
    maxImageArrayLayers;

    unsigned int /** VkSurfaceTransformFlagsKHR     **/     
    supportedTransforms;

    unsigned int /** VkSurfaceTransformFlagBitsKHR  **/
    currentTransform;

    unsigned int /** VkCompositeAlphaFlagsKHR       **/  
    supportedCompositeAlpha;

    unsigned int /** VkImageUsageFlags              **/               
    supportedUsageFlags;

};//[struct]//

struct F20_VkSurfaceFormatKHR {
    unsigned int /** VkFormat        **/    format    ;
    unsigned int /** VkColorSpaceKHR **/    colorSpace;
};//[struct]//

//| enum, not a struct, so does not belong here, but has no place   |//
//| to live.                                                        |//
//| typedef enum VkPresentModeKHR {                                 |//
//|     VK_PRESENT_MODE_IMMEDIATE_KHR = 0,                          |//
//|     VK_PRESENT_MODE_MAILBOX_KHR = 1,                            |//
//|     VK_PRESENT_MODE_FIFO_KHR = 2,                               |//
//|     VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,                       |//
//|     VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR     = 1000111000, |//
//|     VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001, |//
//|     VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF                   |//
//| } VkPresentModeKHR;                                             |//


#define UI32 unsigned int          /////////////////////////////
#define EX2D struct F20_VkExtent2D /////////////////////////////
struct F20_VkSwapchainCreateInfoKHR {
        UI32    sType  ;   /** VkStructureType **/
  const void*   pNext  ;
        UI32    flags  ;   /** VkSwapchainCreateFlagsKHR **/
        
        void*   surface;         /** VkSurfaceKHR    **/

        UI32    minImageCount;   /** uint32_t        **/
        UI32    imageFormat;     /** VkFormat        **/
        UI32    imageColorSpace; /** VkColorSpaceKHR **/
        
        EX2D    imageExtent;

        UI32    imageArrayLayers;
        UI32    imageUsage;       /** VkImageUsageFlags **/
        UI32    imageSharingMode; /** VkSharingMode  **/
        UI32    queueFamilyIndexCount;
  const UI32*   pQueueFamilyIndices  ;

        UI32    preTransform  ;
        UI32    compositeAlpha;
        UI32    presentMode   ;
        UI32    clipped       ;

        //:VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
        void*   oldSwapchain  ;
};//[struct]//
#undef UI32 ////////////////////////////////////////////////////
#undef EX2D ////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////
//    ABOVE: DATA                                             //
//    BELOW: FUNC                                             //
////////////////////////////////////////////////////////////////

//:HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH://
//:First function always "Halt":
static void 
f20_Halt( const char* msg ){ 
    printf( "[f20_Halt]:%s\n", msg ); 
    fflush(stdout); exit(666);
}//[;]//
//:HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH://

//:BUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBU://
//:BU:BlowUp //:SEE[ SC[ VK_SIZES_DEMO_C11_FOR_CHECKSUMS ]]
static void
f20_BlowUpIfStructSizesIncorrect( void ){

    //:The hardcoded sizes are from my x64 windows 10 machine.
    //:AKA: ZOTAC_BOX
    //:(Comparing against lunarG vulkan headers)
    //:SEE[ SC[ edit_vk_struct_sizes_c11 ] ]

    int siz;

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsMessengerCallbackDataEXT 
    );;if( 96 != siz ){ f20_Halt("[!96]"); };

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsObjectNameInfoEXT
    );;if( 40 != siz ){ f20_Halt("[!40:DUONIE]"); };

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsLabelEXT
    );;if( 40 != siz ){ f20_Halt("[!40:DULE]"); };

    siz = (int)sizeof( 
        struct F20_VkLayerProperties 
    );;if( 520 != siz ){ f20_Halt("[!520:LP]"); };

    siz = (int)sizeof( 
        struct F20_VkExtensionProperties 
    );;if( 260 != siz ){ f20_Halt("[!260:EP]"); };

    siz = (int)sizeof( 
        struct F20_VkInstanceCreateInfo 
    );;if( 64 != siz ){ f20_Halt("[!64:ICI]"); };

    siz = (int)sizeof( 
        struct F20_VkApplicationInfo 
    );;if( 48 != siz ){ f20_Halt("[!48:AI]"); };

    siz = (int)sizeof(
        struct F20_VkPhysicalDeviceFeatures
    );;if( 220 != siz ){ f20_Halt("[!220:PDF]"); };

    siz = (int)sizeof(
        struct F20_VkPhysicalDeviceLimits
    );;if( 504 != siz ){ f20_Halt("[!504:PDL]"); }

    siz = (int)sizeof(
        struct F20_VkPhysicalDeviceProperties
    );;if( 824 != siz ){ f20_Halt("[!824:PDP]"); }

    siz = (int)sizeof(
        struct F20_VkPhysicalDeviceSparseProperties
    );;if( 20 != siz ){ f20_Halt("[!20:PDSP]"); }

    siz = (int)sizeof(
        struct F20_VkExtent3D
    );;if( 12 != siz ){ f20_Halt("[!12:E3D]"); }

    siz = (int)sizeof(
        struct F20_VkQueueFamilyProperties
    );;if( 24 != siz ){ f20_Halt("[!24:QFP]"); }

    siz = (int)sizeof(
        struct F20_VkDeviceQueueCreateInfo
    );;if( 40 != siz ){ f20_Halt("[!40:DQCI]"); }

    siz = (int)sizeof(
        struct F20_VkDeviceCreateInfo
    );;if( 72 != siz ){ f20_Halt("[!72:DCI]"); }

    siz = (int)sizeof(
        struct F20_VkWin32SurfaceCreateInfoKHR
    );;if( 40 != siz ){ f20_Halt("[!40:W32SCI]"); }

    //X//

    siz = (int)sizeof(
        struct F20_VkExtent2D
    );;if(  8 != siz ){ f20_Halt("[!8:E2D]"); }

    siz = (int)sizeof(
        struct F20_VkSurfaceCapabilitiesKHR
    );;if( 52 != siz ){ f20_Halt("[!52:SC]"); }

    siz = (int)sizeof(
        struct F20_VkSurfaceFormatKHR
    );;if(  8 != siz ){ f20_Halt("[!8:SF]"); }


    //X//

    siz = (int)sizeof(
        struct F20_VkSwapchainCreateInfoKHR
    );;if(  104 != siz ){ f20_Halt("[!104:SCI]"); }




    
    printf("\n");
    printf("[f20:struct_size_checks_pass]\n");
    printf("\n");
    fflush(stdout);


}//[;]//
//:BUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBU://


//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

    int F20_Init(){
        printf("[BEG:F20:Init]\n");

        int ret = F10_Init();

        f20_BlowUpIfStructSizesIncorrect();

        printf("[END:F20:Init]\n");
        return( ret );
    }//[;]//
    int F20_Main(){
        F20_Init();


        
        printf("[F20:TO_EXIT:CTRL+C]\n");
        while( 1 ){ /** Keep threaded window open. **/ };



        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

//#FILE_REGION[ F.20 ]END#####################################//