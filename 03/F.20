//#FILE_REGION[ F.20 ]BEG#####################################//

//: DOTADIW: VULKAN_STRUCT
//: (ALSO SEE: F.35: Structs that take function pointers)
//: (Declarations, no instantiation!)


//:void* types (via DECLARE_HANDLE( whatever ) )
//[ F20_VkDebugUtilsMessengerEXT ==== void*  ]//

struct F20_VkApplicationInfo {
    unsigned int       sType; //:VkStructureType
    const void*        pNext;
    const char*        pApplicationName;
    unsigned int       applicationVersion; //:uint32_t
    const char*        pEngineName;
    unsigned int       engineVersion;      //:unsigned int
    unsigned int       apiVersion;         //:unsigned int
};//[struct]//

struct F20_VkInstanceCreateInfo {
    unsigned int                sType; //:VkStructureType
    const void*                 pNext;
    unsigned int                flags;

    const struct F20_VkApplicationInfo*    
                      pApplicationInfo;

    unsigned int                enabledLayerCount;
    const char* const*          ppEnabledLayerNames;

    //:Is "const char**" same as "const char* const*" ?
    //:In fact.. Both are "char**" with extra constraints.

    unsigned int                enabledExtensionCount;
    const char* const*          ppEnabledExtensionNames;

};//[struct]//

struct F20_VkExtensionProperties {

    char        
    extensionName[ 

        256 /**VK_MAX_EXTENSION_NAME_SIZE**/ 

    ];

    unsigned int /** uint32_t **/    
    specVersion;

};//[struct]//

struct F20_VkLayerProperties {
    
    #define MACRO_A 256 //:VK_MAX_EXTENSION_NAME_SIZE
    #define MACRO_B 256 //:VK_MAX_DESCRIPTION_SIZE

    char            layerName[   MACRO_A ];//:MAX_EXT
    unsigned int    specVersion;
    unsigned int    implementationVersion;
    char            description[ MACRO_B ];//:MAX_DSC

    #undef MACRO_A
    #undef MACRO_B

};//[struct]//

struct 
F20_VkDebugUtilsLabelEXT {
    unsigned int       sType; /** VkStructureType **/
    const void*        pNext;
    const char*        pLabelName;
    float              color[4];
};//[struct]//

struct 
F20_VkDebugUtilsObjectNameInfoEXT {
    unsigned int         sType;        /** VkStructureType **/
    const   void*        pNext;
    unsigned int         objectType;   /** VkObjectType    **/
    unsigned long long   objectHandle; /** uint64_t        **/
    const char*          pObjectName;
};

struct 
F20_VkDebugUtilsMessengerCallbackDataEXT {

    unsigned int /** VkStructureType **/
    sType;

    const void*                                  
    pNext;

    /** VkDebugUtilsMessengerCallbackDataFlagsEXT **/ 
    unsigned int    
    flags;

    const char*                                  
    pMessageIdName;

    signed int /** int32_t **/                                      
    messageIdNumber;

    const char*                                  
    pMessage;

    unsigned int /** uint32_t **/                                     
    queueLabelCount;

    const struct F20_VkDebugUtilsLabelEXT*                  
    pQueueLabels;

    unsigned int /** uint32_t **/                                     
    cmdBufLabelCount;

    const struct F20_VkDebugUtilsLabelEXT*                  
    pCmdBufLabels;

    unsigned int /** uint32_t **/                                     
    objectCount;

    const struct F20_VkDebugUtilsObjectNameInfoEXT*         
    pObjects;

};

//+----------------------------------------------------------+//
//|                                                          |//
//|          www.khronos.org/registry/vulkan/specs/          |//
//|          1.1-extensions/man/html/                        |//
//|          VkPhysicalDeviceFeatures.html                   |//
//|                                                          |//
//+----------------------------------------------------------+//
/** UI32  =~=  typedef uint32_t VkBool32 **/ ///////////////////
#define UI32 unsigned int //////////////////////////////////////
struct F20_VkPhysicalDeviceFeatures {

        UI32    robustBufferAccess;
        UI32    fullDrawIndexUint32;
        UI32    imageCubeArray;
        UI32    independentBlend;
        UI32    geometryShader;
        UI32    tessellationShader;
        UI32    sampleRateShading;
        UI32    dualSrcBlend;
        UI32    logicOp;
        UI32    multiDrawIndirect;
        UI32    drawIndirectFirstInstance;
        UI32    depthClamp;
        UI32    depthBiasClamp;
        UI32    fillModeNonSolid;
        UI32    depthBounds;
        UI32    wideLines;
        UI32    largePoints;
        UI32    alphaToOne;
        UI32    multiViewport;
        UI32    samplerAnisotropy;
        UI32    textureCompressionETC2;
        UI32    textureCompressionASTC_LDR;
        UI32    textureCompressionBC;
        UI32    occlusionQueryPrecise;
        UI32    pipelineStatisticsQuery;
        UI32    vertexPipelineStoresAndAtomics;
        UI32    fragmentStoresAndAtomics;
        UI32    shaderTessellationAndGeometryPointSize;
        UI32    shaderImageGatherExtended;
        UI32    shaderStorageImageExtendedFormats;
        UI32    shaderStorageImageMultisample;
        UI32    shaderStorageImageReadWithoutFormat;
        UI32    shaderStorageImageWriteWithoutFormat;
        UI32    shaderUniformBufferArrayDynamicIndexing;
        UI32    shaderSampledImageArrayDynamicIndexing;
        UI32    shaderStorageBufferArrayDynamicIndexing;
        UI32    shaderStorageImageArrayDynamicIndexing;
        UI32    shaderClipDistance;
        UI32    shaderCullDistance;
        UI32    shaderFloat64;
        UI32    shaderInt64;
        UI32    shaderInt16;
        UI32    shaderResourceResidency;
        UI32    shaderResourceMinLod;
        UI32    sparseBinding;
        UI32    sparseResidencyBuffer;
        UI32    sparseResidencyImage2D;
        UI32    sparseResidencyImage3D;
        UI32    sparseResidency2Samples;
        UI32    sparseResidency4Samples;
        UI32    sparseResidency8Samples;
        UI32    sparseResidency16Samples;
        UI32    sparseResidencyAliased;
        UI32    variableMultisampleRate;
        UI32    inheritedQueries;

};

#undef  UI32 ///////////////////////////////////////////////////

struct F20_VkPhysicalDeviceProperties {

    !! NOTICE_ME_SENPAI !! (TODO:Finish Mapping here)

    unsigned int /** uint32_t **/ apiVersion;
    unsigned int /** uint32_t **/ driverVersion;
    unsigned int /** uint32_t **/ vendorID;
    unsigned int /** uint32_t **/ deviceID;

    unsigned int /** enum VkPhysicalDeviceType **/                
    deviceType;

    char                                
    deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];

    uint8_t                             
    pipelineCacheUUID[VK_UUID_SIZE];

    VkPhysicalDeviceLimits              
    limits;

    VkPhysicalDeviceSparseProperties    
    sparseProperties;

    !! NOTICE_ME_SENPAI !! (TODO:Finish Mapping here)

} VkPhysicalDeviceProperties;




////////////////////////////////////////////////////////////////
//    ABOVE: DATA                                             //
//    BELOW: FUNC                                             //
////////////////////////////////////////////////////////////////

//:HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH://
//:First function always "Halt":
static void 
f20_Halt( const char* msg ){ 
    printf( "[f20_Halt]:%s\n", msg ); 
    fflush(stdout); exit(666);
}//[;]//
//:HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH://

//:BUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBU://
//:BU:BlowUp
static void
f20_BlowUpIfStructSizesIncorrect( void ){

    //:The hardcoded sizes are from my x64 windows 10 machine.
    //:AKA: ZOTAC_BOX
    //:(Comparing against lunarG vulkan headers)

    int siz;

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsMessengerCallbackDataEXT 
    );;if( 96 != siz ){ f20_Halt("[!96]"); };

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsObjectNameInfoEXT
    );;if( 40 != siz ){ f20_Halt("[!40:DUONIE]"); };

    siz = (int)sizeof( 
        struct F20_VkDebugUtilsLabelEXT
    );;if( 40 != siz ){ f20_Halt("[!40:DULE]"); };

    siz = (int)sizeof( 
        struct F20_VkLayerProperties 
    );;if( 520 != siz ){ f20_Halt("[!520:LP]"); };

    siz = (int)sizeof( 
        struct F20_VkExtensionProperties 
    );;if( 260 != siz ){ f20_Halt("[!260:EP]"); };

    siz = (int)sizeof( 
        struct F20_VkInstanceCreateInfo 
    );;if( 64 != siz ){ f20_Halt("[!64:ICI]"); };

    siz = (int)sizeof( 
        struct F20_VkApplicationInfo 
    );;if( 48 != siz ){ f20_Halt("[!48:AI]"); };

    siz = (int)sizeof(
        struct F20_VkPhysicalDeviceFeatures
    );;if( 220 != siz ){ f20_Halt("[!220:PDF]"); };

}//[;]//
//:BUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBU://


//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

    int F20_Init(){
        printf("[BEG:F20:Init]\n");

        int ret = F10_Init();

        f20_BlowUpIfStructSizesIncorrect();

        printf("[END:F20:Init]\n");
        return( ret );
    }//[;]//
    int F20_Main(){
        F20_Init();


        
        printf("[F20:TO_EXIT:CTRL+C]\n");
        while( 1 ){ /** Keep threaded window open. **/ };



        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//

//#FILE_REGION[ F.20 ]END#####################################//