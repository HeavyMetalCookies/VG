//#FILE_REGION[ F.09 ]BEG#####################################//

//[ DOTADIW: MAKE_A_WINDOW                                   ]//

//[V:Variables. #VARS_TOP_OF_FILE_BIG_PICTURE#               ]//
//[VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV]//

//:Initial_Window_Size_And_Position:
////////////////////////////////////////////
int f09_X    = 22  ; /**  GLEB_SWIN.X    **/
int f09_Y    = 22  ; /**  GLEB_SWIN.Y    **/
int f09_WID  = 1024; /**  GLEB_SWIN.WID  **/
int f09_HIG  = 512 ; /**  GLEB_SWIN.HIG  **/
////////////////////////////////////////////

    signed char f09_window_created     = 0;
    signed char f09_window_just_closed = 0;
      
    void* f09_handle_to_window      = NULL; //:HWND
    void* f09_window_device_context = NULL; //:HDC
    void* f09_handle_to_exe         = NULL; //:HINSTANCE
    
    //:Forward declare so we can keep variables
    //:at top of file.
    struct F09_STRUCT_PIXELFORMATDESCRIPTOR;
    struct F09_STRUCT_PIXELFORMATDESCRIPTOR
                f09_pixel_format_descriptor;
    signed char f09_InitPixelFormatDescriptor_DONE=0;

//[VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV]//

//[H:Halt Always first function in file._____________________]//
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
static void 
f09_Halt( const char*     msg ){ 
    printf( "[f09_Halt]:%s\n", msg ); 
    fflush(stdout); exit(666);
}//[;]//
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//

//:PUBLIC GETTERS:
////////////////////////////////////////////////////////////////
void*
F09_GetHWND( void ){
    if(NULL==f09_handle_to_window){
        f09_Halt("[WindowHandleIsNull]");
    };;
    return( f09_handle_to_window );
}//[;]//

void*
F09_GetHINSTANCE( void ){
    if(NULL==f09_handle_to_exe){
        f09_Halt("[ExeHandleIsNull]");
    };;
    return( f09_handle_to_exe );
}//[;]//


////////////////////////////////////////////////////////////////

//[SI:Structs_And_Initializers (Initializers For The Structs)]//
//[SISISISISISISISISISISISISISISISISISISISISISISISISISISISISI]//

typedef void (*F09_GENERIC_FUNC)(void);


typedef 
    __int64
    (__stdcall *F09_WNDPROC)(
        void*             //: HWND
    ,   unsigned   int    //: UINT
    ,   unsigned __int64  //: WPARAM
    ,            __int64  //: LPARAM
    );

// ---------------------------------------------------------- //

struct F09_STRUCT_WNDCLASSEXW {
                unsigned int   cbSize       ;
                unsigned int   style        ;
                 F09_WNDPROC   lpfnWndProc  ;
                         int   cbClsExtra   ;
                         int   cbWndExtra   ;
                        void*  hInstance    ;
                        void*  hIcon        ;
                        void*  hCursor      ;
                        void*  hbrBackground;
        const unsigned short*  lpszMenuName ;
        const unsigned short*  lpszClassName;
                        void*  hIconSm      ;
};

// ---------------------------------------------------------- //

struct F09_STRUCT_POINT{

    long x;
    long y;

};//[struct]//

//:winuser.h
struct F09_STRUCT_MSG {

    void*                    hwnd    ;  //: HWND    ://
    unsigned   int           message ;  //: UINT    ://
    unsigned __int64         wParam  ;  //: WPARAM  ://

             __int64         lParam  ;  //: LPARAM  ://
    unsigned    long         time    ;  //: DWORD   ://

    struct F09_STRUCT_POINT  pt      ;  //: POINT   ://
    unsigned    long         lPrivate;  //: DWORD   ://

};//[struct]//



//[  docs.microsoft.com/en-us/windows/win32/api/wingdi       ]//
//[  /ns-wingdi-pixelformatdescriptor                        ]//
#define W unsigned short /** WORD **/  /////////////////////////
#define D unsigned long  /**DWORD **/  /////////////////////////
#define B unsigned char  /** BYTE **/  /////////////////////////
struct F09_STRUCT_PIXELFORMATDESCRIPTOR {
    W  nSize;   
    W  nVersion;

    D dwFlags;

    B  iPixelType;
    B  cColorBits;
    B  cRedBits;
    B  cRedShift;
    B  cGreenBits;
    B  cGreenShift;
    B  cBlueBits;
    B  cBlueShift;
    B  cAlphaBits;
    B  cAlphaShift;
    B  cAccumBits;
    B  cAccumRedBits;
    B  cAccumGreenBits;
    B  cAccumBlueBits;
    B  cAccumAlphaBits;
    B  cDepthBits;
    B  cStencilBits;
    B  cAuxBuffers;
    B  iLayerType;
    B  bReserved;

    D dwLayerMask;
    D dwVisibleMask;
    D dwDamageMask;

};//[struct]//
#undef  W ////////////// /** WORD **/  /////////////////////////
#undef  D ////////////// /**DWORD **/  /////////////////////////
#undef  B ////////////// /** BYTE **/  /////////////////////////
void                                       
f09_InitPixelFormatDescriptor(       
    void                                   
){          
    if( f09_InitPixelFormatDescriptor_DONE != 0 ){
        f09_Halt("[AlreadyInited:PFD]");
    };;
                                                                           
    struct F09_STRUCT_PIXELFORMATDESCRIPTOR                  
    p ={  
        
        //[ nSize    ----------------------------------]////[]//
        sizeof(struct F09_STRUCT_PIXELFORMATDESCRIPTOR ), //[]//
                                                          //[]//
        1,                             //[ nVersion ---]////[]//                  
                                                          //[]//
            //[ dwFlags: %GCC%/[...]/wingdi.h ---------]////[]//
            //[ What do you want to support?  ---------]////[]//
       (0   //[-------------------------------]//         //[]//
        |   0x00000004 /** PFD_DRAW_TO_WINDOW **/         //[]//
        |   0x00000020 /** PFD_SUPPORT_OPENGL **/         //[]//
        |   0x00000001 /** PFD_DOUBLEBUFFER   **/         //[]//
        |   //[-------------------------------]//         //[]//
        0)                                                //[]//
                                                          //[]//
        ,                                                 //[]//
                                                          //[]//
        //[ iPixelType: The kind of framebuffer. ------]////[]//
        //[ RGBA or palette.                     ------]////[]//
        //[ Request RGBA format (PFD_TYPE_RGBA)  ------]////[]//
        0x0 /** PFD_TYPE_RGBA **/                         //[]//
        ,                                                 //[]//
                                                          //[]//
        //[ cColorBits: Colordepth of the framebuffer. ]////[]//
        //[ cColorBits=="count of color bits" I think. ]////[]//
        32,                                               //[]//
                                                          //[]//
        0, 0, //[ cRedBits  , cRedShift  : IGNORED ----]////[]//
        0, 0, //[ cGreenBits, cGreenShift: IGNORED ----]////[]//
        0, 0, //[ cBlueBits , cBlueShift : IGNORED ----]////[]//
                                                          //[]//
        0,    //[ cAlphaBits : >= 0    ----------------]////[]//                        
        0,    //[ cAlphaShift: IGNORED ----------------]////[]//
                                                          //[]//
        0,    //[ cAccumBits : >= 0    ----------------]////[]//
                                                          //[]//
                                                          //[]//
        0,    //[ cAccumRedBits  : IGNORED ------------]////[]//
        0,    //[ cAccumGreenBits: IGNORED ------------]////[]//
        0,    //[ cAccumBlueBits : IGNORED ------------]////[]//
        0,    //[ cAccumAlphaBits: IGNORED ------------]////[]//
                                                          //[]//
        //[ cDepthBits  : Number_Of_Bits: depthbuffer  ]////[]//
        24,                                               //[]//
                                                          //[]//
        //[ cStencilBits: Number_Of_Bits: stencilbuffer]////[]//
        8,                                                //[]//
                                                          //[]//
        //[ cAuxBuffers : >=0                          ]////[]//
        //[ Number of Aux buffers in framebuffer.      ]////[]//
        0,                                                //[]//
                                                          //[]//
        //[ iLayerType: ------------------------------ ]////[]//
        0x0 /**PFD_MAIN_PLANE : Main Drawing Layer **/,   //[]//
                                                          //[]//
        //[ "byte reserved?" ---------]////[ --------- ]////[]//
        0, //[ bReserved    : IGNORED.]////[ --------- ]////[]//
                                         //[ --------- ]////[]//
                                         //[ --------- ]////[]//
        //[ MASKS: IGNORED ---------- ]////[ --------- ]////[]//
        0, //[ dwLayerMask  : IGNORED ]////[ --------- ]////[]//
        0, //[ dwVisibleMask: IGNORED ]////[ --------- ]////[]//
        0  //[ dwDamageMask : IGNORED ]////[ --------- ]////[]//                            
    };;     

    //:Quick smoke test in case I missed a param
    //:and my data is mis-aligned.
    if( 32 != p.cColorBits   ){
        f09_Halt( "[32!=p.cColorBits]" );
    };;
    if( 24 != p.cDepthBits  ){
        printf("[p.cDepthBits]:%d\n" , p.cDepthBits );
        f09_Halt( "[24!=p.cDepthBits]");
    };;
    if(  8 != p.cStencilBits ){
       f09_Halt( "[08!=p.cStencilBits]");
    };;
                                           
    //[ Copy Over To Global Variable ]// 
    f09_pixel_format_descriptor =( p );
    f09_InitPixelFormatDescriptor_DONE = 1;
                                           
} //[InitPixelFormatDescriptor]//          

//[SISISISISISISISISISISISISISISISISISISISISISISISISISISISISI]//


// ---------------------------------------------------------- //

////////////////////////////////////////////////////////////////             

typedef const unsigned short *  TYPEDEF_LPCWSTR;


char*
F09_MakeIntResourceA( int i ){

    #define MACRO_16BITS unsigned short
    #define MACRO_64BITS unsigned long long
   
    MACRO_16BITS  wword = (MACRO_16BITS)i    ; //:TRUNCATE
    MACRO_64BITS  qword = (MACRO_64BITS)wword; //:ZERO_EXTEND
    char* ret_out=(char*)qword; //://////////////:CAST

    #define T unsigned short     //:TRUNCATE
    #define E unsigned __int64   //:ZERO_EXTEND
    #define C char*              //:CAST

    //: stackoverflow.com/questions/3610565
    char* ret_chk=((C)((E)((T)(i))));

    assert( ret_chk == ret_out );

    return( ret_out );

    #undef  MACRO_16BITS  //////////////////////////////////////
    #undef  MACRO_32BITS  //////////////////////////////////////
                          //////////////////////////////////////
    #undef  C  /////////////////////////////////////////////////
    #undef  E  /////////////////////////////////////////////////
    #undef  T  /////////////////////////////////////////////////
}//[;]//

////////////////////////////////////////////////////////////////

//:WinMsgHanWndPoc:WINDOW_MESSAGE_HANDLER_WNDPROC
__stdcall
__int64 //:LRESULT
F09_WinMsgHanWndPoc(
/**/           void*    Hw     //:HWND
,   unsigned   int      Msg    //:...?...
,   unsigned __int64    wParam //:WPARAM
,            __int64    lParam //:LPARAM
){
    //:An LRESULT tells us what we did
    //:with the message. If handled it
    //:should return zero.
    __int64 return_this_result = 0; //:LRESULT
    int ok = 0; //:BOOL

    //|SOURCE:winuser.h |___________|//
    //| wm_size    = 0x0005 ;       |//
    //| wm_keydown = 0x0100 ;       |//
    //| wm_keyup   = 0x0101 ;       |//
    //| wm_close   = 0x0010 ;       |//
    //| wm_destroy = 0x0002 ;       |//
    //| wm_paint   = 0x000F ;       |//
    //| vk_escape  = 0x001B ;       |//
    //|_____________________________|//

    switch(Msg){ //:- - - - - - - - - - - - - -://
    case 0x0005/**wm_size**/:{

        printf("[GLEB_SWIN:WM_SIZE]\n");
        fflush(stdout);

    }break;
    case 0x0100 /**wm_keydown**/:{
        if(wParam==0x001B /**vk_escape**/ ){

            ok = (int)(unsigned long long)
                 ((F03_01)(F02_DestroyWindow))(Hw);

            if(0==ok){f09_Halt("[0OK_1]");}

        }else{
            //:KEBO_DOWN_HandleVirtualKey( wParam );
        };;

    }break;

    case 0x0101 /**wm_keyup**/:{
        
            //:KEBO_UPPP_HandleVirtualKey( wParam );

    }break;

    //:WM_CLOSE: The "[X]" button was clicked.
    case 0x0010 /**wm_close**/:

        ok = (int)(unsigned long long)
            ((F03_01)(F02_DestroyWindow))(Hw);

        if(0==ok){f09_Halt("[0OK_2]");}

    //:WM_DESTROY: ( DESTROYED|DESTROYING )
    case 0x0002 /**wm_destroy**/:  
        //: Send "WM_QUIT" to exit msg loop.
        ((F03_01)F02_PostQuitMessage)(0);

    case 0x000F /**wm_paint**/:
        //:[TODO]:Something to pace the updating
        //:of graphics.


        //+ DELETE THIS BLOCK +//
        //- //:I dont think this is needed:         -//
        //- //: You may use the same HDC in both    -//
        //- //: threads, but not at the same time.  -//
        //- //: SEE[ gl-hdc-thread-quote ]          -//
        //- if(GLEB_SWIN.render_tick_function_has){ -//
        //-    GLEB_SWIN.render_tick_function();    -//
        //- };;                                     -//

        //: This might be better done setting a flag
        //: than using a callback. In order to prevent
        //: drawing code from being invoked on the
        //: wrong thread.

        //: With that said, setting a flag:
        //- ENGETHER.THREADING.InterlockedIncrement64( -//
        //-     &( GLEB_SWIN.THREAD_SAFE_FLAGS.        -//
        //-        redraw_message_count )              -//
        //- );;                                        -//

        
        //+ This call needs to be made from    +//
        //+ the same thread as your OpenGL     +//
        //+ calls.                             +//
        //# DONT_HERE:GLEB_SWIN_SwapBuffers(); #//





    //:Keep window responsive:
    default: 
        return_this_result=(
            (__int64)
            ((F03_04)(F02_DefWindowProcW))(
            /**/(void*)                     Hw  
            ,   (void*)(unsigned long long)Msg
            ,   (void*)                 wParam
            ,   (void*)                 lParam
            )
        );;
    };;//:- - - - - - - - - - - - - - - - - - -://

    return( return_this_result );
} //[F09_WinMsgHanWndPoc]//

////////////////////////////////////////////////////////////////


int //:BOOL
F09_RegisterWindow(
/**/                    void*  hInstance                
/**/,   const unsigned short*  unique_window_name    
){

    //|Smoke_Test:-----------------------|//
    size_t struct_size =(
        sizeof( struct F09_STRUCT_WNDCLASSEXW )
    );;
    if( struct_size != 80 ){
        f09_Halt("[BadStructSize]");
    };;//|-------------------------------|//
    
    //: WNDCLASSEXW W;
    struct F09_STRUCT_WNDCLASSEXW 
    W = {0};

    //| Winuser.h ClassStyles(CS_) |//
    #define T unsigned int  //////////
            T  cs_hredraw = 0x0002 ;//
            T  cs_vredraw = 0x0001 ;//
            T  cs_owndc   = 0x0020 ;//
    #undef  T ////////////////////////

    W.cbSize=sizeof( struct F09_STRUCT_WNDCLASSEXW );
    W.style=(
        cs_hredraw | //| Copied from glfw's:   |//
        cs_vredraw | //| win32_window.c        |//
        cs_owndc   | //| _gflwRegisterWindow   |//
                     //| ...ClassWin32         |//
    0);;
    W.lpfnWndProc=F09_WinMsgHanWndPoc;
    W.cbClsExtra=0;
    W.cbWndExtra=0;
    W.hInstance=hInstance;

    char* idi_application = F09_MakeIntResourceA( 32512 );
    char* idc_arrow       = F09_MakeIntResourceA( 32512 );

    W.hIcon  =((F03_02)F02_LoadIconA)(  
        NULL
    ,   idi_application
    );;
    W.hCursor=((F03_02)F02_LoadCursorA)(  
        NULL
    ,   idc_arrow
    );;

    //| Looking at:                            |//
    //| https://github.com/glfw/glfw/blob/     |//
    //| master/src/win32_window.c              |//
    //| does not look like background          |//
    //| brush color eneds to be set.           |//
    //|                                        |//
    //| Code here specifically says:           |//
    //| "No Background Required For GL"        |//
    //| http://nehe.gamedev.net/tutorial       |//
    //| /creating_an_opengl_window_(win32)     |//
    //| /13001/                                |//
    //- W.hbrBackground=(                      -//
    //-     /**/(HBRUSH)                       -// 
    //-     /**/ FP->GDI32.GetStockObject(     -// 
    //-     /**/     FP->GDI32.DATA.BRUSH.BLACK-// 
    //-     /**/)                              -// 
    //- );;                                    -//
    W.hbrBackground=NULL;

    W.lpszMenuName=NULL;
    W.lpszClassName=unique_window_name;
    W.hIconSm=(
        ((F03_02)F02_LoadIconA)(
            NULL
        ,   idi_application
        )
    );;

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|//
    //! If you forget to register your         !//
    //! window class, the observable effect    !//
    //! is the window never opening, and the   !//
    //! wait loop exiting immediately.         !//
    //|________________________________________|//
    return(
        (int)(unsigned long long)
        ((F03_01)F02_RegisterClassExW)(
            &( W )
        )
    );;
} //[Register]//


void //:gleb_swin_MakeWindowCompatibleWith_GL
f09_MakeWindowCompatibleWith_GL(
    void*  Hw /**HWND**/
){
    
    f09_InitPixelFormatDescriptor();

    void* /** HDC **/ 
    window_device_context =(
        ((F03_01)F02_GetWindowDC)( Hw ) /**user32**/
    );;
    int
    pixel_format_number=(
        (int)(unsigned long long)
        ((F03_02)F02_ChoosePixelFormat)( /**gdi32**/
            window_device_context
        , &( f09_pixel_format_descriptor )
        )
    );;
    int /** BOOL **/ 
    setting_pixel_format_worked=(
        (int)(unsigned long long)
        ((F03_03)F02_SetPixelFormat)(
        /**/
        /**/        window_device_context
        /**/    ,
        /**/        (void*)(unsigned long long)
        /**/        pixel_format_number
        /**/    ,
        /**/        &( f09_pixel_format_descriptor )
        )
    );;
    if( setting_pixel_format_worked ){
        //: printf("[SPF:OK]\n");
    }else{
        f09_Halt("[SPF:FAIL]\n");
    };;

    f09_window_device_context=(
        window_device_context
    );;

} //[MakeWindowCompatibleWith_GL]//


//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//

int //:BOOL
f09_TakeOrLookMessage( 
/**/
    struct F09_STRUCT_MSG*
    dont_prefix_message_with_and_symbol /**LPMSG**/
    ,
    int    
    take_the_message
){

    unsigned int   look;
    unsigned int   take;
    unsigned int   look_or_take;

    look = 0x0000 /** pm_noremove **/ ;
    take = 0x0001 /** pm_remove   **/ ;
    look_or_take =(777);

    if( take_the_message > 0 ){
        look_or_take = take;
    }else
    if( 0 == take_the_message ){
        look_or_take = look;
    }else{
        f09_Halt("[Exp:Pos|Or|Zero]");
    };;

    int ret =(
    (int)(unsigned long long)
    ((F03_05)F02_PeekMessageW)(
        (void*)
        dont_prefix_message_with_and_symbol
        ,
        NULL
        ,
        0
        ,
        0
        ,
        (void*)(unsigned long long)
        look_or_take

    ));;

    return( ret );

} //[TakeOrLookMessage]//



int //:BOOL
f09_LookMessage(
    struct F09_STRUCT_MSG* msg //:LPMSG
){
    int ret;
    const int look = 0;
    ret=f09_TakeOrLookMessage(msg,look);
    return( ret );
} //[LookMessage]//



int //:BOOL
f09_TakeMessage(
    struct F09_STRUCT_MSG* msg //:LPMSG
){
    int ret;
    const int take = 1;
    ret=f09_TakeOrLookMessage(msg,take);
    return( ret );
} //[TakeMessage]//

//[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]//


struct F09_STRUCT_MSG //:MSG struct
f09_WindowLoop(
    void*  Hw //:HWND
){

    int sw_show = 5; //:Active window..
    void* show = (void*)(unsigned long long)sw_show;
    ((F03_02)F02_ShowWindow  )(  Hw, show  ); 
    ((F03_01)F02_UpdateWindow)(  Hw        ); 
    ((F03_01)F02_SetFocus    )(  Hw        );

    unsigned int  wm_quit =  0x12;          

    struct F09_STRUCT_MSG  
    M; //:MSG struct

    f09_LookMessage( &M );
    while(
        M.message
        !=
        wm_quit
    ){
        if( f09_TakeMessage(    &M )){

            ((F03_01)F02_TranslateMessage)( &M );

            ((F03_01)F02_DispatchMessageW)( &M );

        };;

    };;

    f09_window_just_closed = ('t'|'r'|'u'|'e');

   //: //# [HACK]:Sleep a bit so other threads    #//
   //: //#        see "window_just_closed" update.#//
   //: //# You really should use a proper mutex.  #//
    ((F03_01)F02_Sleep)( (void*)64 );

    return( M );

} //[WindowLoop]//


//: Call this function on a separate thread!
//: Refactor_Of:gleb_swin_OPEN_WINDOW_LOOP_FOREVER
unsigned __int64 //:WPARAM
F09_OpenWindowAndLoopForever(
    //:UNICODE_STRING
    const unsigned short *  //:LPCWSTR (Technically_LPCTSTR)
    unique_window_name      
    ,
    const unsigned short *  //:LPCWSTR (Technically_LPCTSTR)
    window_titlebar_text

    //:#Technically_LPCTSTR#://
    //: Technically LPCTSTR, not LPCWSTR,
    //: But using extended (ex) function and unicode/wide
    //: characters where I can. Thus resolved type is LPCWSTR.
){
     
    //: void* /**HMODULE**/ hin=(
    //:     ((F03_01)F02_GetModuleHandleW)(
    //:         NULL
    //:     )
    //: );;//[a]//

    /** HMODULE / HINSTANCE / Handle_To_Running_Exe_File **/
    if(NULL != f09_handle_to_exe ){
        f09_Halt("[Expected_Null_exe_handle_to_start]");
    };;
    f09_handle_to_exe =(
         ((F03_01)F02_GetModuleHandleW)(
             NULL
         )
    );;

    if(NULL==f09_handle_to_exe){
        f09_Halt(
            "[FailedToGetModuleHandle]"
        );;
    };;//[b]//

    /////////////////////////////////////
    void*                              //
    Hw = NULL;  //:HWND                //
                                       //
    struct F09_STRUCT_MSG              //
    Msg       ;   //:tagMSG (Struct)   //
    /////////////////////////////////////

    if(0 >=
        F09_RegisterWindow(
            f09_handle_to_exe /** HINSTANCE/HMODULE **/
        ,   unique_window_name
        )
    ){ 

        f09_Halt( /** Originally: gleb_swin_Alert **/
            "[FailedToRegisterWindow]"
        );;
        return 0; 

    };;//[c]//

    int X   = f09_X   ; //:Initial_X_Position
    int Y   = f09_Y   ; //:Initial_Y_Position
    int WID = f09_WID ; //:Initial_WIDTH
    int HIG = f09_HIG ; //:Initial_HEIGHT

    unsigned long ws_overlappedwindow=( 0
    |   0x00000000L  /** WS_OVERLAPPED  **/
    |   0x00C00000L  /** WS_CAPTION     **/
    |   0x00080000L  /** WS_SYSMENU     **/
    |   0x00040000L  /** WS_THICKFRAME  **/
    |   0x00020000L  /** WS_MINIMIZEBOX **/
    |   0x00010000L  /** WS_MAXIMIZEBOX **/
    );;//[d]//

    unsigned long cs_owndc = 0x0020;

    //:NOOP's so I can comment out call to CreateWindowExW:
    if( cs_owndc            ){ /** NOOP **/ };
    if( ws_overlappedwindow ){ /** NOOP **/ };
    if( X|Y|WID|HIG         ){ /** NOOP **/ };
    if( f09_handle_to_exe   ){ /** NOOP **/ };

    void*
    the_desktop_window=((F03_00)F02_GetDesktopWindow)();

    Hw=F08_CreateWindowExW
    (

    /**/0x00000008L           /** ws_ex_topmost **/
    ,   unique_window_name    /** lpClassName   **/
    ,   window_titlebar_text  /** lpWindowName  **/      
  
    , 
        (0
        |  ws_overlappedwindow /** STYLE **/   
        |  cs_owndc            /** STYLE **/
        |
        0)

    ,   X,Y,WID,HIG

    ,   the_desktop_window //:-- hWndParent ---://
    ,   NULL   //:-------------- hMenu      ---://
    ,   f09_handle_to_exe  //:-- hInstance  ---://        
    ,   NULL   //:-------------- lpParam    ---://  
    );//[e]//

    if(Hw==NULL){
        f09_Halt("[F09:WindowCreateFail]");
        return 0;
    };;//[f]//

    //:Store the handle to window in global state:
    f09_handle_to_window=Hw;

    //:Modifications to make window opengl
    //:compatible:
    //////////////////////////////////////////////
    f09_MakeWindowCompatibleWith_GL(
        Hw
    );;//[g]//

    //|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯MC|//
    //!PUT AFTER device context has been     MC!//
    //!set, or your device context fetching  MC!//
    //!function waiting on this flag to be   MC!//
    //!set in this thread will end up        MC!//
    //!with a NULL device context.           MC!//
    //!Speaking Of:                          MC!//
    //!GLEB_SWIN_GetWindowDeviceContext();   MC!//
    f09_window_created=1;                 //|MC|//
    //|______________________________________MC|//

    //////////////////////////////////////////////

    Msg = f09_WindowLoop( Hw );

    return Msg.wParam;
} //[OPEN_WINDOW_LOOP_FOREVER]//

int F09_Init(){
    
    //:No action besides calling down the chain.

    int ret = F08_Init();

    return( ret );
}//[;]//
int F09_Main(){
    F09_Init();

    //:NOT called int "Init" function, because we want
    //:to create the window in different thread higher
    //:up the chain.
    F09_OpenWindowAndLoopForever(
        L"MOTHER_FUCKING_UNIQUE_WINDOW_CLASS_ID"
    ,   L"[SEE_FILE[ F.07 ]][伍零s丁]"
    );;

    return( 0 );
}//[;]//

int F09_Demo_SingleThreaded(){
    F09_Main();
    return( 0 );
}//[;]//


//[ ]////|////////////////////////////////////////////|////[ ]//
//[ ]////|     -///-                        -///-     |////[ ]//
//[ ]////|....(( 0 ))|| ||_ _--  --_ _|| ||(( 0 ))....|////[ ]//
//[ ]////|_  __      __  __  __  __  __  __      __  _|////[ ]//
//[ ]////| \/  \    /  \/  \/  \/  \/  \/  \    /  \/ |////[ ]//
//[ ]////|      \  /                        \  /      |////[ ]//
//[ ]////|       \/                          \/       |////[ ]//
//[ ]////+ BEG: #BOTTOM_OF_FILE_COMMENTS_SECTION#     +////[ ]//
//[ ]////|           /\                  /\           |////[ ]//
//[ ]////|          /  \                /  \          |////[ ]//
//[ ]////|_--__--__/    \__/\__/\__/\__/    \__--__--_|////[ ]//
//[ ]////|                                            |////[ ]//
//[ ]////|       ______________________________       |////[ ]//
//[ ]////|______/                              \______|////[ ]//
#if(BOTTOM_OF_FILE_COMMENTS_SECTION) ///////////////////////////
/** ******************************************************** |||
                                                   
#VARS_TOP_OF_FILE_BIG_PICTURE#
    Variables are at the top of the file because they are
    what is most likely to be re-looked at when looking
    over the code months later.
                                                 
  
||| ******************************************************** **/ 
#endif /////////////////////////////////////////////////////////
//[ ]////|______                                ______|////[ ]//
//[ ]////|||||||\______________________________/|||||||////[ ]//
//[ ]////|                                            |////[ ]//
//[ ]////|....(( 0 ))|| ||_ _--  --_ _|| ||(( 0 ))....|////[ ]//
//[ ]////|_  __      __  __  __  __  __  __      __  _|////[ ]//
//[ ]////| \/  \    /  \/  \/  \/  \/  \/  \    /  \/ |////[ ]//
//[ ]////|      \  /                        \  /      |////[ ]//
//[ ]////|       \/                          \/       |////[ ]//
//[ ]////+ END: #BOTTOM_OF_FILE_COMMENTS_SECTION#     +////[ ]//
//[ ]////|           /\                  /\           |////[ ]//
//[ ]////|          /  \                /  \          |////[ ]//
//[ ]////|_--__--__/    \__/\__/\__/\__/    \__--__--_|////[ ]//
//[ ]////|                                            |////[ ]//
//[ ]////|____________________________________________|////[ ]//

//#FILE_REGION[ F.09 ]END#####################################//