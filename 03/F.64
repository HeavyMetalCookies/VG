//#FILE_REGION[ F.64 ]BEG#####################################//

//:DOTADIW: MAK_LOGIC_DEV
//:        (make logical device)
//:        (chapter_8_of_vulkan_tutorial )

////////////////////////////////////////////////////////////////

    void*  /** VK_DEFINE_HANDLE(VkDevice) **/
    F64_logical_device = NULL;

    struct F20_VkPhysicalDeviceFeatures
    F64_enabled_logical_device_features = { 0 };

    int*  F64_qfi_unique_set    =NULL;
    int   F64_qfi_unique_set_len= 0  ;


//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
/** ---- **/                                        /** ---- **/
/** ---- **/    //:First function always "Halt":    /** ---- **/
/** ---- **/    static void                         /** ---- **/
/** ---- **/    f64_Halt( const char* msg ){        /** ---- **/
/** ---- **/        printf(                         /** ---- **/
/** ---- **/            "[f64_Halt]:%s\n", msg      /** ---- **/
/** ---- **/        );;                             /** ---- **/
/** ---- **/        fflush(stdout); exit(666);      /** ---- **/
/** ---- **/    }//[;]//                            /** ---- **/
/** ---- **/                                        /** ---- **/
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//

////////////////////////////////////////////////////////////////
static int f64_NOOP0(void){ return( 1 ); }

static void
f64_AllocateArrayOfUniqueQueueIndicies( void ){

    printf("[BEG:AAOUQI]"); fflush(stdout);

    int Q_01 = F62_qfi_graphics;  //: qfi[ qfi_ptr=0 ] == Q_01
    int Q_02 = F62_qfi_compute ;  //: qfi[ qfi_ptr=1 ] == Q_02
    int Q_03 = F63_qfi_present ;  //: qfi[ qfi_ptr=2 ] == Q_03

    #define  MACRO_QFI_LEN 3 ///////////////////////////////////
    int qfi[ MACRO_QFI_LEN ]={
        Q_01
    ,   Q_02
    ,   Q_03
    };;//[qinit]//

    //:Empty Set:
    int set_dat[3]={-1,-2,-3};
    int set_len   = 0;
    
    

    int qfi_ptr =( 0-1 );
    int max_dex = (MACRO_QFI_LEN-1);
    while( 1 ){
        qfi_ptr++;
        if( qfi_ptr > max_dex ){ break; }
        
        //:Loop through all set entries:
        int already_exists = 0;
        int potential_set_entry = qfi[ qfi_ptr ];
        for( int se = 0; se < set_len; se++ ){

            if( potential_set_entry == qfi[ se ] ){
                already_exists = 1;
            };;
        };;
        
        if( 0==already_exists ){
            set_dat[ set_len ] = potential_set_entry;
                     set_len++ ;
        };;//[ae]//
    };;//[w1]//
    
    #undef  MACRO_QFI_LEN //////////////////////////////////////

    //:Copy data into malloced array:
    F64_qfi_unique_set      = calloc( set_len, sizeof(int) );
    F64_qfi_unique_set_len  = set_len;
    for( int se = 0; se < set_len; se++ ){
        F64_qfi_unique_set[ se ] = set_dat[ se ];
        printf("[ENTRY]%d [VALUE]%d \n", se, set_dat[ se ] );;
    };;//[cd]//

    printf("[Q_01]%d\n", Q_01 );
    printf("[Q_02]%d\n", Q_02 );
    printf("[Q_03]%d\n", Q_03 );
       
    printf("[END:AAOUQI]"); fflush(stdout);

}//[;]//

static void
f64_PrivateInitChapterEight_08( void ){

    if( f64_NOOP0() != 1 ){ f64_Halt("[X_X]"); };

    //********************************************************//
    //:PAGE 75 says you need one of these structs for         //
    //:each queue type you want to make.                      //
    //:(one F20_VkDeviceQueueCreateInfo per queue made)       //
    //:(Unless the queue indices for two or more of your)     //
    //:(queue types (graphics,compute,present) are identical  //
    //:indicies.                                              //
    //********************************************************//
    // struct F20_VkDeviceQueueCreateInfo ci_qqq ={0};
    // ci_qqq.sType = 2; /** DEVICE_QUEUE_CREATE_INFO **/
    // ci_qqq.queueFamilyIndex = F62_qfi_graphics;
    // ci_qqq.queueCount       = 1;
    // float queue_priority = 1.0f; //:Array of 1 element.
    // ci_qqq.pQueuePriorities = &(queue_priority);
    //********************************************************//

    f64_AllocateArrayOfUniqueQueueIndicies();
    struct F20_VkDeviceQueueCreateInfo*
    ci_qqq_POINTER=(
        calloc(     
            F64_qfi_unique_set_len
        ,   sizeof( struct F20_VkDeviceQueueCreateInfo)
        )
    );;
    for( int i = 0; i < F64_qfi_unique_set_len; i++ ){
        #define PTR ci_qqq_POINTER /////////////////////////////

        PTR[i].sType = 2; /** DEVICE_QUEUE_CREATE_INFO **/

        //:Example: F62_qfi_graphics
        PTR[i].queueFamilyIndex =(
            F64_qfi_unique_set[ i ]
        );;

        //:Number of queues from this qfi(queue_family_index)
        //:you are requesting.
        PTR[i].queueCount       = 1;

        float queue_priority = 1.0f; //:Array of 1 element.
        PTR[i].pQueuePriorities = &(queue_priority);

        #undef  PTR  ///////////////////////////////////////////
    };;

    //:QUESTION:
    //:Why does tutorial8 want VkPhysicalDeviceFeatures? 
    //:We already created
    //:F62_physical_device_features when creating our
    //:physical device in previous file.        
    //:( VK_PDF / VkPhysicalDeviceFeatures )
    //:
    //:ANSWER:
    //:F62_physical_device_features : 
    //:         What hardware CAN do.
    //:
    //:F64_enabled_logical_device_features:
    //:         What tasks you require of the logical
    //:         abstraction of that hardware.
    //:        
    //:         Example: I may be able to:
    //:              1: lift 50 LBS
    //:              2; program
    //:
    //:         But as a logical device working for
    //:         five guys burgers and fries, they only need
    //:         to enable "LIFTING" but not "PROGRAMMING".
    ////////////////////////////////////////////////////////////

    //: F64_enabled_logical_device_features  (See top of file)

    ////////////////////////////////////////////////////////////

    //: ci_qqq_POINTER=NULL; CAUSE_CRASH_TO_MAKE_SURE_WORKING

    struct F20_VkDeviceCreateInfo ci_dev = { 0 };
    ci_dev.sType = 3; /** DEVICE_CREATE_INFO **/

//: ci_dev.pQueueCreateInfos = &( ci_qqq ); //:<<<ARRAY!
    ci_dev.pQueueCreateInfos =  ( ci_qqq_POINTER );

    ci_dev.queueCreateInfoCount = F64_qfi_unique_set_len;
    ci_dev.pEnabledFeatures = &( 
        F64_enabled_logical_device_features
    );;

        //:Adding swapchain selection.
        //:BOOK_PAGE[ 78 ]FILE_SHORTCUT[ VKTUT2018PDF ]
        ////////////////////////////////////////////////////////
        #define arr F61P5_physical_device_extensions_names
        #define len F61P5_physical_device_extensions_names_count
        #define READ_ONLY_LIST const char**
        ////////////////////////////////////////////////////////

        ci_dev.  enabledExtensionCount=len;
        ci_dev.ppEnabledExtensionNames=(READ_ONLY_LIST)arr;
         
        #undef arr /////////////////////////////////////////////
        #undef len /////////////////////////////////////////////
        #undef READ_ONLY_LIST //////////////////////////////////
        /**ppEnabledExtensionNames === enabledExtensionNames **/
        ////////////////////////////////////////////////////////

    int res =(

        (int)(unsigned long long)

        ((F03_04)F02_vkCreateDevice)(
        /**/      F62_physical_device
        /**/    , &( ci_dev )
        /**/    , NULL
        /**/    ,&( F64_logical_device )
        )
    );;
    if( res != 0 /** VK_SUCCESS **/ ){
        f64_Halt("[FailedToMakeLogicalDevice]");
    }else{
        printf("[LOGICAL_DEVICE_GOT!]\n");
        fflush(stdout);
    };;

    free( ci_qqq_POINTER );
}//[;]//


////////////////////////////////////////////////////////////////

//:IM:Init_And_Main:
//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//
    int F64_Init(){
        printf("[BEG:F64:Init]\n");

            ////////////////////////////////////////////////////

            //: ".SUPER_CHAIN()"
            int ret = F63_Init(); 

            //: LAST_ITEM_IN_CODE_CHAIN:
            f64_PrivateInitChapterEight_08();

            ////////////////////////////////////////////////////

        printf("[END:F64:Init]\n");
        return( ret );
    }//[;]//
    int F64_Main(){

        printf("[F64_Main:Before:F64_Init()]\n");
        ////////////////////////////////////////////////////////

        F64_Init();

        ////////////////////////////////////////////////////////
        printf("[F64_Main:Afterr:F64_Init()]\n");


        
        //:RLSI:RENDER_LOOP_STAND_IN
        ////////////////////////////////////////////////////////

        printf("[F64:TO_EXIT:CTRL+C]\n");
        fflush(stdout );
        while( 1 ){ }; //:LOOP_FOREVER

        ////////////////////////////////////////////////////////

        return( 0 );
    }//[;]//

//[IMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIMIM]//



//#FILE_REGION[ F.64 ]END#####################################//
