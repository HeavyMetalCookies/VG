#define lib MACRO_project_prefix_HIDDEN  //:Private   //: 01 ://
#define LIB MACRO_project_prefix_VISIBLE //:Public    //: 02 ://
#define GM1( a , b )      a## _ ##b      //:GLUEMAC_01//: 03 ://
#define GM2( a , b ) GM1( a   ,   b )    //:GLUEMAC_02//: 04 ://
#define K_1( a,b,c )      a## _ ##b## _ ##c  //:KIND  //: 05 ://
#define K_2( a,b,c ) K_1( a   ,   b   ,   c )//:KIND  //: 06 ://                                   
#define MAK(  nam  ) K_2( LIB ,MAK, nam )//:MAK:MACRO //: 07 ://   
#define TYP(  nam  ) K_2( LIB ,TYP, nam )//:TYP:TYPE  //: 08 ://   
#define INS(  nam  ) K_2( LIB ,INS, nam )//:INS:INST  //: 09 ://   
#define FUN(  nam  ) K_2( LIB ,FUN, nam )//:FUN:FUNC  //: 10 :// 
#define EXA(  nam  ) K_2( LIB ,EXA, nam )//:EXAMPLE   //: 11 :// 
#define VAR(  nam  ) GM2( VAR   ,   nam )//:Local_Var //: 12 ://
                                                      //: -- ://
//:Effectively private via obfuscation:               //: -- ://
#define fun(  nam  ) GM2( f_2020_04_22_0657AM , nam ) //: 13 :// 
#define  H    fun( Halt )                             //: 14 ://
#define  D    fun( DebugPrint )                       //: 15 ://
                                                      //: -- ://
#define NIL ((void*)0)                                //: 16 ://
#define ins(  nam  ) GM2( i_2020_04_22_1047PM , nam ) //: 17 ://
#define MEM(  nam  ) K_2( LIB ,MEM, nam )// Member    //| 18 |//
//:CHAINFILE_MACRO:  CMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCM://

    //:path to this file:
    #define  SRC_NATIVE_WINDOW_CREATION ( 1 )

//:CMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCMCM  :CHAINFILE_MACRO://
//:STRUCTS: SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS://

    //[  SEE[ VG03.ALL's F09_STRUCT_PIXELFORMATDESCRIPTOR ]  ]//
    //[  docs.microsoft.com/en-us/windows/win32/api/wingdi   ]//
    //[  /ns-wingdi-pixelformatdescriptor                    ]//
    #define B_04 unsigned long  /**DWORD **/  //:////////////://
    #define B_02 unsigned short /** WORD **/  //:////////////://
    #define B_01 unsigned char  /** BYTE **/  //:////////////://
    struct TYP(PIXELFORMATDESCRIPTOR) {  
    /**  01  **/    B_02  nSize;             
    /**  02  **/    B_02  nVersion;          
    /**  --  **/                          
    /**  03  **/    B_04  dwFlags;            
    /**  --  **/                          
    /**  04  **/    B_01  iPixelType;        
    /**  05  **/    B_01  cColorBits;        
    /**  06  **/    B_01  cRedBits;          
    /**  07  **/    B_01  cRedShift;         
    /**  08  **/    B_01  cGreenBits;        
    /**  09  **/    B_01  cGreenShift;       
    /**  10  **/    B_01  cBlueBits;         
    /**  11  **/    B_01  cBlueShift;        
    /**  12  **/    B_01  cAlphaBits;        
    /**  13  **/    B_01  cAlphaShift;       
    /**  14  **/    B_01  cAccumBits;        
    /**  15  **/    B_01  cAccumRedBits;     
    /**  16  **/    B_01  cAccumGreenBits;   
    /**  17  **/    B_01  cAccumBlueBits;    
    /**  18  **/    B_01  cAccumAlphaBits;   
    /**  19  **/    B_01  cDepthBits;        
    /**  20  **/    B_01  cStencilBits;      
    /**  21  **/    B_01  cAuxBuffers;       
    /**  22  **/    B_01  iLayerType;        
    /**  23  **/    B_01  bReserved;         
    /**  --  **/                          
    /**  24  **/    B_04  dwLayerMask;        
    /**  25  **/    B_04  dwVisibleMask;      
    /**  26  **/    B_04  dwDamageMask;       
    /**  --  **/
    };//[struct]//
    #undef  B_04 ////////////// /**DWORD **/  //:////////////://
    #undef  B_02 ////////////// /** WORD **/  //:////////////://
    #undef  B_01 ////////////// /** BYTE **/  //:////////////://

    //:winuser.h
    struct TYP(WIN32POINT){

        long x;         //:TAKEN_FROM:VGK03.ALL:
        long y;         //:F09_STRUCT_POINT && F09_STRUCT_MSG

    }ins(win32point)={
        0
    };

    //:winuser.h
    struct TYP(WINMSG){  //:WINDOW's "MSG" type:

        void*                    hwnd    ;  //: HWND    ://
        unsigned   int           message ;  //: UINT    ://
        unsigned __int64         wParam  ;  //: WPARAM  ://

                 __int64         lParam  ;  //: LPARAM  ://
        unsigned    long         time    ;  //: DWORD   ://

        struct  TYP(WIN32POINT)  pt      ;  //: POINT   ://
        unsigned    long         lPrivate;  //: DWORD   ://

    }ins(winmsg)={
        0
    };

//:SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS :STRUCTS://
//:TYPEDEFS: TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT://

    //:Generic function pointer type:
    ////////////////////////////////////////////////////////////

    //:Did not expect something like TYP(FUN) to expanded
    //:correctly. But maybe we should avoid that?

    typedef 
        void (* TYP(FUN) )(void);

    typedef
        int TYP(TYP);
    ////////////////////////////////////////////////////////////

    //:Generic function pointer type:
    typedef void (* TYP(Func) )(void); //:Function pointer.
    typedef void*   TYP(Data)        ; //:Data     pointer.

    // ------------------------------------------------------ //
    typedef 
        __int64
        (__stdcall *TYP(WNDPROC) )(
            void*             //: HWND
        ,   unsigned   int    //: UINT
        ,   unsigned __int64  //: WPARAM
        ,            __int64  //: LPARAM
        );
    // ------------------------------------------------------ //
    struct TYP(WNDCLASSEXW) {
                    unsigned int   cbSize       ;
                    unsigned int   style        ;
                    TYP(WNDPROC)   lpfnWndProc  ;
                             int   cbClsExtra   ;
                             int   cbWndExtra   ;
                            void*  hInstance    ;
                            void*  hIcon        ;
                            void*  hCursor      ;
                            void*  hbrBackground;
            const unsigned short*  lpszMenuName ;
            const unsigned short*  lpszClassName;
                            void*  hIconSm      ;
    };
    // ------------------------------------------------------ //

//:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT: TYPEDEFS://
//:FORWARD_DECLARATIONS::FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF://
    __stdcall
    __int64 //:LRESULT
    fun(WinMsgHanWndPoc)(
    /**/           void*    han_win   //:HWND
    ,   unsigned   int      Msg       //:...?...
    ,   unsigned __int64    wParam    //:WPARAM
    ,            __int64    lParam    //:LPARAM
    );

    char*
    fun(MakeIntResourceA)( int i );

    //:This function is registered with the main game loop.
    //:It does NOT need to be public, since this file
    //:does the registering, not the game loop file.
    void fun( WindowTick )( void );

//:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF::FORWARD_DECLARATIONS://
//:INSTANCES: IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII://

    int ins(frames_without_window)=(0-1); //:negative==unset

    struct TYP(WNDCLASSEXW) INS(WNDCLASSEXW)={0};
    void*  INS(han_exe)=(NIL); //:AKA:handle_to_exe
    void*  INS(dek_win)=(NIL); //:AKA:the_desktop_window
    void*  ins(han_win)=(NIL); //:AKA:handle_to_YOUR_window
    void*  ins(con_win)=(NIL); //:AKA:window_device_context

    #define NOT_UNICODE_I_SWEAR const unsigned short //://///://
    //://////////////////////////////////////////////////////://

    NOT_UNICODE_I_SWEAR*      //:AKA:unique_window_name
    INS(win_nam)=( L"2020_4_22:UNIQUE_WINDOW_NAME"     );

    NOT_UNICODE_I_SWEAR*      //:AKA:titlebar_text
    INS(tib_tex)=( L"[FLIP_THE_FUCKING_TABLE!]((╯°□°）╯︵ ┻━┻))" );

    //://////////////////////////////////////////////////////://
    #undef  NOT_UNICODE_I_SWEAR //://////////////////////////://
    
    //:FUNCTION_POINTERS:  FPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFP://
            
    TYP(FUN)    INS(CreateWindowExW  )=( NIL );
    TYP(FUN)    INS(GetDesktopWindow )=( NIL );
    TYP(FUN)    INS(RegisterClassExW )=( NIL );
    TYP(FUN)    INS(LoadIconA        )=( NIL );
    TYP(FUN)    INS(LoadCursorA      )=( NIL );
    TYP(FUN)    INS(GetModuleHandleW )=( NIL );
    TYP(FUN)    INS(DefWindowProcW   )=( NIL );
    TYP(FUN)    INS(DestroyWindow    )=( NIL );
    TYP(FUN)    INS(PostQuitMessage  )=( NIL );
    TYP(FUN)    INS(GetWindowDC      )=( NIL );
    TYP(FUN)    INS(ChoosePixelFormat)=( NIL );
    TYP(FUN)    INS(SetPixelFormat   )=( NIL );
    TYP(FUN)    INS(ShowWindow       )=( NIL );
    TYP(FUN)    INS(UpdateWindow     )=( NIL );
    TYP(FUN)    INS(SetFocus         )=( NIL );
    TYP(FUN)    INS(PeekMessageW     )=( NIL );
    TYP(FUN)    INS(TranslateMessage )=( NIL );
    TYP(FUN)    INS(DispatchMessageW )=( NIL );

    //:FPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFPFP  :FUNCTION_POINTERS://

    struct TYP(PIXELFORMATDESCRIPTOR) INS(fod_pix)={0};
    int    ins(fmt_num)=( 0 ); //:pixel_format_number

//:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII: INSTANCES://






//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//
//[H:Halt: The_First_Function_Is_Always_Halt                 ]//
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//                                               
/*-//[*/                                                /*]//-*/
/*-//[*/    static void                                 /*]//-*/
/*-//[*/    fun(Halt)( const char* msg ){               /*]//-*/
/*-//[*/        printf(                                 /*]//-*/
/*-//[*/            "[2020_04_08:Halt]:%s\n"            /*]//-*/
/*-//[*/        ,   msg                                 /*]//-*/
/*-//[*/        );;                                     /*]//-*/
/*-//[*/        fflush(stdout); exit(64);               /*]//-*/
/*-//[*/    }                                           /*]//-*/
/*-//[*/                                                /*]//-*/
//[HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH]//

    static void
    fun( DebugPrint )( const char* msg ){
        printf("[2020_04_22:DebugPrint:MSG]:%s\n",msg);
        fflush( stdout );
    }






int FUN( SRC_NATIVE_WINDOW_creation )( void ){
printf("[SRC_NATIVE_WINDOW_creation]\n");

    //:STEPS: 
    //: 1: EII: Existance_Is_Initialization
    //:         Front load resources first and make sure
    //:         they all are valid.
    //:
    //: 2: Register Your Window "Class".
    //:
    //: 3: .....todo...

    TYP(TYP)     int_a = 5;
    VG04_TYP_TYP int_b = 6;
    printf("[int_a]:%d\n", int_a);
    printf("[int_b]:%d\n", int_b);

    //:EII:Existance_Is_Initialization:(BELOW):--------------://
    //:EIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEII://

    //: INS( variable_names ) : Public, Init immediately here.
    //: ins( variable_names ) : Private,Init before func exits.
    //: MORE_INFO[ SC[ EII_INS_INS_RULES ] ]

    //:EIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEII://

    ////////////////////////////////////////////////////////////
    INS(CreateWindowExW)=
    FUN(GetProcAddress)("dll_u32","CreateWindowExW");

    INS(GetDesktopWindow)=
    FUN(GetProcAddress)("dll_u32","GetDesktopWindow");

    INS(RegisterClassExW)=
    FUN(GetProcAddress)("dll_u32","RegisterClassExW");

    INS(LoadIconA)=
    FUN(GetProcAddress)("dll_u32","LoadIconA");

    INS(LoadCursorA)=
    FUN(GetProcAddress)("dll_u32","LoadCursorA");

    INS(GetModuleHandleW)= //: "kernel32.dll"
    FUN(GetProcAddress)("dll_k32","GetModuleHandleW");

    INS(DefWindowProcW)=
    FUN(GetProcAddress)("dll_u32","DefWindowProcW");

    INS(DestroyWindow)=
    FUN(GetProcAddress)("dll_u32","DestroyWindow");

    INS(PostQuitMessage)=
    FUN(GetProcAddress)("dll_u32","PostQuitMessage");

    INS(GetWindowDC)=
    FUN(GetProcAddress)("dll_u32","GetWindowDC");

    INS(ChoosePixelFormat)= //: "gdi32.dll"
    FUN(GetProcAddress)("dll_g32","ChoosePixelFormat");

    INS(SetPixelFormat)= //: "gdi32.dll"
    FUN(GetProcAddress)("dll_g32","SetPixelFormat");

    INS(ShowWindow)=
    FUN(GetProcAddress)("dll_u32","ShowWindow");

    INS(UpdateWindow)=
    FUN(GetProcAddress)("dll_u32","UpdateWindow");

    INS(SetFocus)=
    FUN(GetProcAddress)("dll_u32","SetFocus");

    INS(PeekMessageW)=
    FUN(GetProcAddress)("dll_u32","PeekMessageW");

    INS(TranslateMessage)=
    FUN(GetProcAddress)("dll_u32","TranslateMessage");

    INS(DispatchMessageW)=
    FUN(GetProcAddress)("dll_u32","DispatchMessageW");



    //:eiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieii://
    if( ((void*)0) != INS(CreateWindowExW) ){
        D("[SUCCESS:CreateWindowExW]");
    }else{
        H("[FAILURE:CreateWindowExW]");
    };;
    if( ((void*)0) != INS(GetDesktopWindow) ){
        D("[SUCCESS:GetDesktopWindow]");
    }else{
        H("[FAILURE:GetDesktopWindow]");
    };;
    if( ((void*)0) != INS(RegisterClassExW) ){
        D("[SUCCESS:RegisterClassExW]");
    }else{
        H("[FAILURE:RegisterClassExW]");
    };;
    if( ((void*)0) != INS(LoadIconA) ){
        D("[SUCCESS:LoadIconA]");
    }else{
        H("[FAILURE:LoadIconA]");
    };;
    if( ((void*)0) != INS(LoadCursorA) ){
        D("[SUCCESS:LoadCursorA]");
    }else{
        H("[FAILURE:LoadCursorA]");
    };;
    if( ((void*)0) != INS(GetModuleHandleW) ){
        D("[SUCCESS:GetModuleHandleW]");
    }else{
        H("[FAILURE:GetModuleHandleW]");
    };;
    if( ((void*)0) != INS(DefWindowProcW) ){
        D("[SUCCESS:DefWindowProcW]");
    }else{
        H("[FAILURE:DefWindowProcW]");
    };;
    if( ((void*)0) != INS(DestroyWindow) ){
        D("[SUCCESS:DestroyWindow]");
    }else{
        H("[FAILURE:DestroyWindow]");
    };;
    if( ((void*)0) != INS(PostQuitMessage) ){
        D("[SUCCESS:PostQuitMessage]");
    }else{
        H("[FAILURE:PostQuitMessage]");
    };;
    if( ((void*)0) != INS(GetWindowDC) ){
        D("[SUCCESS:GetWindowDC]");
    }else{
        H("[FAILURE:GetWindowDC]");
    };;
    if( ((void*)0) != INS(ChoosePixelFormat) ){
        D("[SUCCESS:ChoosePixelFormat]");
    }else{
        H("[FAILURE:ChoosePixelFormat]");
    };;
    if( ((void*)0) != INS(SetPixelFormat) ){
        D("[SUCCESS:SetPixelFormat]");
    }else{
        H("[FAILURE:SetPixelFormat]");
    };;
    if( ((void*)0) != INS(ShowWindow) ){
        D("[SUCCESS:ShowWindow]");
    }else{
        H("[FAILURE:ShowWindow]");
    };;
    if( ((void*)0) != INS(UpdateWindow) ){
        D("[SUCCESS:UpdateWindow]");
    }else{
        H("[FAILURE:UpdateWindow]");
    };;
    if( ((void*)0) != INS(SetFocus) ){
        D("[SUCCESS:SetFocus]");
    }else{
        H("[FAILURE:SetFocus]");
    };;
    if( ((void*)0) != INS(PeekMessageW) ){
        D("[SUCCESS:PeekMessageW]");
    }else{
        H("[FAILURE:PeekMessageW]");
    };;
    if( ((void*)0) != INS(TranslateMessage) ){
        D("[SUCCESS:TranslateMessage]");
    }else{
        H("[FAILURE:TranslateMessage]");
    };;
    if( ((void*)0) != INS(DispatchMessageW) ){
        D("[SUCCESS:DispatchMessageW]");
    }else{
        H("[FAILURE:DispatchMessageW]");
    };;

    //:eiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieii://
    //[SC[MSA_FPU_CXX](BELOW)////////////////////////////////]//
    //:make_sure_all_function_pointers_unique:      //|  --  |//
    #define       L_E_N (         18+1)  //://///////////////://
    TYP(FUN) arr[ L_E_N ]={     0x00                //|  --  |//
    ,INS(CreateWindowExW   ) /**  01  **/           //|  01  |//
    ,INS(GetDesktopWindow  ) /**  02  **/           //|  02  |//
    ,INS(RegisterClassExW  ) /**  03  **/           //|  03  |//
    ,INS(LoadIconA         ) /**  04  **/           //|  04  |//
    ,INS(LoadCursorA       ) /**  05  **/           //|  05  |//
    ,INS(GetModuleHandleW  ) /**  06  **/           //|  06  |//
    ,INS(DefWindowProcW    ) /**  07  **/           //|  07  |//
    ,INS(DestroyWindow     ) /**  08  **/           //|  08  |//
    ,INS(PostQuitMessage   ) /**  09  **/           //|  09  |//
    ,INS(GetWindowDC       ) /**  10  **/           //|  10  |//
    ,INS(ChoosePixelFormat ) /**  11  **/           //|  11  |//
    ,INS(SetPixelFormat    ) /**  12  **/           //|  12  |//
    ,INS(ShowWindow        ) /**  13  **/           //|  13  |//
    ,INS(UpdateWindow      ) /**  14  **/           //|  14  |//
    ,INS(SetFocus          ) /**  15  **/           //|  15  |//
    ,INS(PeekMessageW      ) /**  16  **/           //|  16  |//
    ,INS(TranslateMessage  ) /**  17  **/           //|  17  |//
    ,INS(DispatchMessageW  ) /**  18  **/           //|  18  |//
    #define  L_E_N_DOUBLECHECK   (18+1) //:///////////:  --  ://
//: ,INS(function_pointer_name_here)                //|  19  |//
//: ,INS(function_pointer_name_here)                //|  20  |//
//: ,INS(function_pointer_name_here)                //|  31  |//
//: ,INS(function_pointer_name_here)                //|  32  |//
//: ,INS(function_pointer_name_here)                //|  33  |//
//: ,INS(function_pointer_name_here)                //|  34  |//
//: ,INS(function_pointer_name_here)                //|  35  |//
//: ,INS(function_pointer_name_here)                //|  36  |//
//: ,INS(function_pointer_name_here)                //|  37  |//
//: ,INS(function_pointer_name_here)                //|  38  |//
//: ,INS(function_pointer_name_here)                //|  39  |//
//: ,INS(function_pointer_name_here)                //|  40  |//
//: ,INS(function_pointer_name_here)                //|  41  |//
//: ,INS(function_pointer_name_here)                //|  42  |//
//: ,INS(function_pointer_name_here)                //|  43  |//
//: ,INS(function_pointer_name_here)                //|  44  |//
//: ,INS(function_pointer_name_here)                //|  45  |//
//: ,INS(function_pointer_name_here)                //|  46  |//
//: ,INS(function_pointer_name_here)                //|  47  |//
//: ,INS(function_pointer_name_here)                //|  48  |//
//: ,INS(function_pointer_name_here)                //|  49  |//
//: ,INS(function_pointer_name_here)                //|  50  |//
    };;//:////////////////////////////////////////////:  --  ://
    if( L_E_N != L_E_N_DOUBLECHECK ){
        H("[FAIL:MACRO_SETUP_FAIL:L_E_N_DOUBLECHECK]");
    };;
    for( int a = 0; a < L_E_N; a++ ){  //:- - - - - - - - - -://
    for( int b = 0; b < L_E_N; b++ ){  //:- - - - - - - - - -://
        if( a==b ){ continue; };
        if( arr[a]==arr[b] ){ H("[FAIL:NOTASET:2020_04_25]");};
    };;};;                    D("[PASS:YESASET:2020_04_25]");
    #undef  L_E_N //:////////////////////////////////////////://
    //[SC[MSA_FPU_CXX](ABOVE)////////////////////////////////]//
    //:eiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieii://

    INS(han_exe)=((TYP(F_01))INS(GetModuleHandleW))( NIL );
    INS(dek_win)=((TYP(F_00))INS(GetDesktopWindow))(     );

    if( NIL== INS(han_exe) ){ H("[NIL:han_exe]"); };
    if( NIL== INS(dek_win) ){ H("[NIL:dek_win]"); };
    
    //:eiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieiieii://

    //: LATER_IN_FUNCTION: 
    //: INS(fod_pix)==temp_pixel_format_descriptor_for_easy_init
    struct TYP(PIXELFORMATDESCRIPTOR)               
    temp_pixel_format_descriptor_for_easy_init={  
        
        //[ nSize    ----------------------------------]////[]//
        sizeof(struct TYP(PIXELFORMATDESCRIPTOR) ),       //[]//
                                                          //[]//
        1,                             //[ nVersion ---]////[]//                  
                                                          //[]//
            //[ dwFlags: %GCC%/[...]/wingdi.h ---------]////[]//
            //[ What do you want to support?  ---------]////[]//
       (0   //[-------------------------------]//         //[]//
        |   0x00000004 /** PFD_DRAW_TO_WINDOW **/         //[]//
        |   0x00000020 /** PFD_SUPPORT_OPENGL **/         //[]//
        |   0x00000001 /** PFD_DOUBLEBUFFER   **/         //[]//
        |   //[-------------------------------]//         //[]//
        0)                                                //[]//
                                                          //[]//
        ,                                                 //[]//
                                                          //[]//
        //[ iPixelType: The kind of framebuffer. ------]////[]//
        //[ RGBA or palette.                     ------]////[]//
        //[ Request RGBA format (PFD_TYPE_RGBA)  ------]////[]//
        0x0 /** PFD_TYPE_RGBA **/                         //[]//
        ,                                                 //[]//
                                                          //[]//
        //[ cColorBits: Colordepth of the framebuffer. ]////[]//
        //[ cColorBits=="count of color bits" I think. ]////[]//
        32,                                               //[]//
                                                          //[]//
        0, 0, //[ cRedBits  , cRedShift  : IGNORED ----]////[]//
        0, 0, //[ cGreenBits, cGreenShift: IGNORED ----]////[]//
        0, 0, //[ cBlueBits , cBlueShift : IGNORED ----]////[]//
                                                          //[]//
        0,    //[ cAlphaBits : >= 0    ----------------]////[]//                        
        0,    //[ cAlphaShift: IGNORED ----------------]////[]//
                                                          //[]//
        0,    //[ cAccumBits : >= 0    ----------------]////[]//
                                                          //[]//
                                                          //[]//
        0,    //[ cAccumRedBits  : IGNORED ------------]////[]//
        0,    //[ cAccumGreenBits: IGNORED ------------]////[]//
        0,    //[ cAccumBlueBits : IGNORED ------------]////[]//
        0,    //[ cAccumAlphaBits: IGNORED ------------]////[]//
                                                          //[]//
        //[ cDepthBits  : Number_Of_Bits: depthbuffer  ]////[]//
        24,                                               //[]//
                                                          //[]//
        //[ cStencilBits: Number_Of_Bits: stencilbuffer]////[]//
        8,                                                //[]//
                                                          //[]//
        //[ cAuxBuffers : >=0                          ]////[]//
        //[ Number of Aux buffers in framebuffer.      ]////[]//
        0,                                                //[]//
                                                          //[]//
        //[ iLayerType: ------------------------------ ]////[]//
        0x0 /**PFD_MAIN_PLANE : Main Drawing Layer **/,   //[]//
                                                          //[]//
        //[ "byte reserved?" ---------]////[ --------- ]////[]//
        0, //[ bReserved    : IGNORED.]////[ --------- ]////[]//
                                         //[ --------- ]////[]//
                                         //[ --------- ]////[]//
        //[ MASKS: IGNORED ---------- ]////[ --------- ]////[]//
        0, //[ dwLayerMask  : IGNORED ]////[ --------- ]////[]//
        0, //[ dwVisibleMask: IGNORED ]////[ --------- ]////[]//
        0  //[ dwDamageMask : IGNORED ]////[ --------- ]////[]//                            
    };;    
    //:eieieieieieieieieieieieieieieieieieieieieieieieieieiei://
    #define PIX INS(fod_pix) ///////////////////////////////////
    //: COPY_OVER + SMOKE_TEST : BELOW --------------------- ://

        //:Copy over temp to file scope variable:
        //:fod_pix==temp_pixel_format_descriptor_for_easy_init
                PIX=temp_pixel_format_descriptor_for_easy_init;

        //:Smoke_Test:
        ////////////////////////////////////////////////////////
        if(      32!=PIX.cColorBits   ){
            H( "[32!=PIX.cColorBits]" );
        };;
        if( 24 != PIX.cDepthBits  ){
            printf( 
                  "[PIX.cDepthBits]:%d\n"
            ,       PIX.cDepthBits  
            );;
            H("[24!=PIX.cDepthBits]");
        };;
        if(      8!=PIX.cStencilBits ){
           H( "[08!=PIX.cStencilBits]");
        };;     
    
        #define COLT_40 40 /////////////////////////////////////
 
        if( COLT_40 != 
            sizeof( struct TYP(PIXELFORMATDESCRIPTOR) )
        ){
            H("[COLT_40:1]");
        }else
        if( 
            COLT_40 != 
            sizeof( temp_pixel_format_descriptor_for_easy_init)
        ){
            H("[COLT_40:2]");
        }else
        if( COLT_40 != sizeof( PIX ) ){
            H("[COLT_40:3]");
        }else
        if( COLT_40 != sizeof( INS( fod_pix ) ) ){
            H("[COLT_40:4]");
        }else
        if( COLT_40 != INS( fod_pix ).nSize ){
            H("[COLT_40:5]");
        }else{
            D("[PIXELFORMATDESCRIPTOR:It_Checks_Out]");
        };;

        #undef  COLT_40  ///////////////////////////////////////

        ////////////////////////////////////////////////////////
             
    //: COPY_OVER + SMOKE_TEST : ABOVE --------------------- ://
    #undef  PIX ////////////////////////////////////////////////
    //:EIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEIIEII://
    //:EII:Existance_Is_Initialization:(ABOVE):______________://


    //:R:Register:(BELOW):-----------------------------------://
    //:RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR://
    //:Before creating window, must register window class:
    //:RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR://
    
    
    //:SmokeTest:
    size_t struct_size =( sizeof( struct TYP(WNDCLASSEXW) ) );
    if( struct_size != 80 ){ H("[BadStructSize]"); };
    
    
    ////////////////////////////////////////////////////////////
    
    //| Winuser.h ClassStyles(CS_) |//
    #define T unsigned int  //////////
            T  cs_hredraw = 0x0002 ;//
            T  cs_vredraw = 0x0001 ;//
            T  cs_owndc   = 0x0020 ;//
    #undef  T ////////////////////////
    
    INS(WNDCLASSEXW).cbSize=sizeof( struct TYP(WNDCLASSEXW) );
    INS(WNDCLASSEXW).style=(
        cs_hredraw | //| Copied from glfw's:   |//
        cs_vredraw | //| win32_window.c        |//
        cs_owndc   | //| _gflwRegisterWindow   |//
                    //| ...ClassWin32         |//
    0);;
    INS(WNDCLASSEXW).lpfnWndProc=fun(WinMsgHanWndPoc);
    INS(WNDCLASSEXW).cbClsExtra=0;
    INS(WNDCLASSEXW).cbWndExtra=0;
    INS(WNDCLASSEXW).hInstance =( INS( han_exe ) );
    
    char* idi_application = fun(MakeIntResourceA)( 32512 );
    char* idc_arrow       = fun(MakeIntResourceA)( 32512 );
    
    #define F2 TYP(F_02) ///////////////////////////////////////
    
        INS(WNDCLASSEXW).hIcon  =((F2)INS(LoadIconA))(  
            NULL
        ,   idi_application
        );;
        INS(WNDCLASSEXW).hCursor=((F2)INS(LoadCursorA))(  
            NULL
        ,   idc_arrow
        );;
    
    #undef  F2 /////////////////////////////////////////////////
    #define XX /////////////////////////////////////////////////
    
    //:SEE[ HBR_BACKGROUND_CAN_BE_NULL_FOR_VULKAN_WINDOW ]
    //:AKA[ HBC_BNF_VW ]
    INS(WNDCLASSEXW).hbrBackground=NULL;
    INS(WNDCLASSEXW).lpszMenuName=NULL;
    INS(WNDCLASSEXW).lpszClassName=INS(win_nam);
    
    #undef  XX /////////////////////////////////////////////////
    #define F2 TYP(F_02) ///////////////////////////////////////
    
    INS(WNDCLASSEXW).hIconSm=(
        ((F2)INS(LoadIconA))(
            NULL
        ,   idi_application
        )
    );;
    
    #undef  F2 /////////////////////////////////////////////////
    #define F3 TYP(F_03) ///////////////////////////////////////
    
    //:¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯://
    //|If you forget to register your window class,the       |//
    //|observable effect is the window never opening,and the |//
    //|wait loop exiting immediately.                        |//
    //|
    //|RegisterClassExW:(MSDN_DOCS):
    //|Registers a window class for subsequent use in calls  |//
    //|to the CreateWindow or CreateWindowEx function.       |//
    //:______________________________________________________://
    int VAR( bool )=(
        (int)(unsigned long long)
        (  (TYP(F_01))  INS(RegisterClassExW)  )(  
            &( INS(WNDCLASSEXW) )
        )
    );;
    if( VAR( bool ) <= 0 ){
        H("[REGWINCLASS:FAIL]");
    }else{
        D("[REGWINCLASS:PASS]");
    };;
    
    #undef  F3 /////////////////////////////////////////////////
    //:RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR://
    //:R:Register:(ABOVE):-----------------------------------://
    //:CREATE_WINDOW:::CWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCW://
    #define NIHILISM NIL //://///////////|///////////////////://
    #define V void       //://///////////|///////////////////://
    #define U64 unsigned long long int //:///////////////////://
    ins(han_win)=
    ((TYP(F_12))INS(CreateWindowExW))//:---------------------://
    (
    ////
        /**/(V*)0x00000008L  /** ws_ex_topmost **/
        ,   (V*)INS(win_nam) /** Window___Name **/
        ,   (V*)INS(tib_tex) /** Titlebar_Text **/
    ////
        , 
        (V*)(U64)
        (0
        |  0x00CF0000 /** ws_overlappedwindow **/ 
        |      0x0020 /** CS_OWNDC (2B/32b)  **/
        |
        0)
    ////    X_Y_WID_HIG
        ,   (V*)(U64) 22    //: _X_  -----------://
        ,   (V*)(U64) 22    //: _Y_  -----------://
        ,   (V*)(U64) 1024  //: WID  -----------://
        ,   (V*)(U64) 512   //: HIG  -----------://
    ////
        ,   INS(dek_win)    //:-- hWndParent ---://
        ,   ( NIHILISM )    //:-- hMenu      ---://
        ,   INS(han_exe)    //:-- hInstance  ---://        
        ,   ( NIHILISM )    //:-- lpParam    ---://  
    ////
    ); //:---------------------------------------------------://
    
    if(NIL==ins(han_win)){
        H("[FAIL:VKG04_WindowCreateFail]");
        return 0;
    }else{
        D("[PASS:VKG04_CreatedWindow:TODO:SetupWindowLoop]");
    };;
    #undef  U64      //://///////////////////////////////////://
    #undef  V        //://///////////////////////////////////://
    #undef  NIHILISM //://///////////////////////////////////://
    //:CWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCWCW:::CREATE_WINDOW://
    //:DEVICE_CONTEXT: DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC://

    ins(con_win)=((TYP(F_01))INS(GetWindowDC))( ins(han_win) );
    if( NIL==ins(con_win) ){
        H("[FailedToGet:window_device_context/con_win]");
    }else{
        D("[PASS:con_win(window_device_context)]");
    };;

    //:DCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDC :DEVICE_CONTEXT://

    //:PFN:Pixel_Format_Number: GET: ins(fmt_num):
    //::PFN:PFN:PFN:PFN:PFN:PFN::::::PFN:PFN:PFN:PFN:PFN:PFN:://
    ins(fmt_num)=( //:pixel_format_number
        //:CAST_RESULTS:
        (int)(unsigned long long)

        //:FUNCTION_CALL:
        (  (TYP(F_02))INS(ChoosePixelFormat /**GDI32.DLL**/ ))

        //:FUNCTION_PARAMETERS:
        (  
             ins(con_win)    /**window_device_context**/
        , &( INS(fod_pix) )  /**PIXELFORMATDESCRIPTOR**/
        )
    );;

    if( 0 == ins(fmt_num) ){
        H("[FAIL:DEFINITELY_FAILED:ChoosePixelFormat]");
    }else
    if( 0  > ins(fmt_num) ){ //:NEGATIVE
        //:Look more into documentation if this happens.
        //:but pretty sure it should be a positive number.
        //:Also watch out for errors due to sign extension.
        H("[fail?PROBABLY_FAILED:::ChoosePixelFormat]");
    }else
    if( 0  < ins(fmt_num) ){ //:POSITIVE
        D("[PASS:ALL_IS_GOOD_IN_THE_PIXELFORMAT_NEIGHBORHOOD]");
    }else{ //:WHAT_THE_FUCK
        H("[FAIL:WHAT_THE_FUCK:2020_04_25:0148PM]");
    };;
    //::PFN:PFN:PFN:PFN:PFN:PFN::::::PFN:PFN:PFN:PFN:PFN:PFN:://

    //:VC:Vulkan_Compatible:
    //:VCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVC://
    //:VKG03.ALL:f09_MakeWindowCompatibleWith_GL
    //:Make the window compatible with openGL & Vulkan:
    //:VCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVC://
    int /** BOOL **/ 
    setting_pixel_format_worked=(
        (int)(unsigned long long)
        ((TYP(F_03))INS(SetPixelFormat))(
        /**/
        /**/        ins(con_win)  /** window_device_context **/
        /**/    ,
        /**/        (void*)(unsigned long long)
        /**/        ins(fmt_num)  /** pixel_format_number   **/
        /**/    ,
        /**/     &( INS(fod_pix) )/** PIXELFORMATDESCRIPTOR **/
        )
    );;
    if( setting_pixel_format_worked ){
        D("[PASS:SET_PIXEL_FORMAT]");
    }else{
        H("[FAIL:SET_PIXEL_FORMAT]");
    };;
    //:VCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVCVC://

    //:SEE:VG03.ALL:f09_WindowLoop

    //:LG:Loosey_Goosey:
    //:LGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLG://
    //: Because we are playing loosy-goosy without including
    //: any header files, we better check runtime size of
    //: the structs we re-created against observed sizes
    //: when compiling small project using <windows.h> header.
    //:LGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLG://
    if( 8 == sizeof( ins(win32point) ) ){
        D("[PASS:SIZECHECK:win32point]");
    }else{
        H("[FAIL:SIZECHECK:win32point]");
    };;
    if(48 == sizeof( ins(winmsg)     ) ){
        D("[PASS:SIZECHECK:winmsg]");
    }else{
        H("[FAIL:SIZECHECK:winmsg]");
    };;

    if( 8 == sizeof( struct TYP(WIN32POINT) ) ){
        D("[PASS:SIZECHECK:WIN32POINT]");
    }else{
        H("[FAIL:SIZECHECK:WIN32POINT]");
    };;
    if(48 == sizeof( struct TYP(WINMSG)     ) ){
        D("[PASS:SIZECHECK:WINMSG]");
    }else{
        H("[FAIL:SIZECHECK:WINMSG]");
    };;


    //:LGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLGLG://
    //:TP:TickPrep: Prepwork before doing a WindowTick(...):
    //:TPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTP://
    //:                                                      ://
    //:ALL_FUNCTIONS_FROM: "User32.dll"                      ://
    //:                                                      ://
    //: ShowWindow   :Set Visibility State Of Window:        ://
    //: UpdateWindow :Force WM_PAINT to top of message queue.://
    //: SetFocus     :Set keyboard focus to window:          ://
    //:                                                      ://
    //: han_win:-----: handle_to_a_window_instance           ://
    //:                ( handle_to_window )                  ://
    //:TPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTP://
    int sw_show = 5; //:Active window..
    void* show = (void*)(unsigned long long)sw_show;

    ( (TYP(F_02)) INS(ShowWindow)   )(  ins(han_win), show  );
    ( (TYP(F_01)) INS(UpdateWindow) )(  ins(han_win)        ); 
    ( (TYP(F_01)) INS(SetFocus)     )(  ins(han_win)        );

    //:TPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTP://

    //:We are not going to enter a window loop here.
    //:That would wreck the chain structure of our project
    //:setup. Instead we will register WindowTick function
    //:with the main game loop, and the game loop will 
    //:call it for us.
    INS(looptable).MEM(nat_win)=&( fun(WindowTick) );


    return( 0 );
}


int fun(TakeOrLookMessage)( //://////////////////////////////://

    //:ins(winmsg) / LPMSG
    struct TYP(WINMSG)* dont_prefix_message_with_and_symbol 
    ,
    int                 take_the_message
){ //:///////////////////////////////////////////////////////://

    unsigned int   look;
    unsigned int   take;
    unsigned int   look_or_take;

    look = 0x0000 /** pm_noremove **/ ;
    take = 0x0001 /** pm_remove   **/ ;
    look_or_take =(777);

    if( take_the_message > 0 ){
        look_or_take = take;
    }else
    if( 0 == take_the_message ){
        look_or_take = look;
    }else{
        H("[FAIL:EXPECTED:Pos|Or|Zero]");
    };;

    int ret =(
        //:CAST_RETURN_DATA:
        (int)(unsigned long long)

        //:FUNCTION_TO_CALL:
        (  (TYP(F_05)) INS(PeekMessageW)  )

        //:ARGUMENTS_TO_FUNCTION:
        (
        /** -- **/    (void*)
        /** 01 **/    dont_prefix_message_with_and_symbol
        /** -- **/    ,
        /** 02 **/    NULL //:hWnd:NullToProcessThreadMessages
        /** -- **/    ,
        /** 03 **/    0    //:wMsgFilterMin
        /** -- **/    ,
        /** 04 **/    0    //:wMsgFilterMax
        /** -- **/    ,
        /** -- **/    (void*)(unsigned long long)
        /** 05 **/    look_or_take  //:wRemoveMsg
        )
    );;
    return( ret );

} //://////////////////////////////////////:TakeOrLookMessage://
int /** BOOL **/ fun(LookMessage)( //:///////////////////////://
    struct TYP(WINMSG)* msg //:LPMSG
){
    int ret;
    const int look = 0;
    ret=fun(TakeOrLookMessage)(msg,look);
    return( ret );
} //:////////////////////////////////////////////:LookMessage://
int /** BOOL **/ fun(TakeMessage)( //:///////////////////////://
    struct TYP(WINMSG)* msg //:LPMSG
){
    int ret;
    const int take = 1;
    ret=fun(TakeOrLookMessage)(msg,take);
    return( ret );
} //:////////////////////////////////////////////:TakeMessage://

//:I thought this needed to be public. But then I realized
//:it is this file's responsibility to register itself
//:with the main game loop.
void fun( WindowTick )( void )
{
    //:One tick of our window loop goes here.

    //:######################################################://
    #define M ins(winmsg) //:################################://

    fun(LookMessage)( &M );
    if( /** WHILE_CONVERTED_TO_AN_IF **/ //://///////////////://

        M.message != 0x12 /** UINT:wm_quit **/

    ){  //://////////////////////////////////////////////////://

        if( fun(TakeMessage)(    &M )){

            ( (TYP(F_01))INS(TranslateMessage) )( &M );

            ( (TYP(F_01))INS(DispatchMessageW) )( &M );

        };;

        ins(frames_without_window) = 0;

    }else{ //:///////////////////////////////////////////////://

        //:Notify console if the window is closed and the
        //:program is still executing.
        #define MSG_MAX_INDEX ( 5 ) //://////////////////////://
            ins(frames_without_window)++;
            char* no_more_window_message=(
                "[SRC/NATIVE/WINDOW/creation._:NOMOREWINDOW]\n"
            );;
            if( ins(frames_without_window) < MSG_MAX_INDEX ){
                //:TODO: Variables to let rendering system know
                //:      that the window is closed. For now 
                //:      a simple printf will do.
                printf(no_more_window_message);
                fflush(stdout);
            }else
            if( ins(frames_without_window) == MSG_MAX_INDEX ){
                printf("[StillNoWindowButBeingQuietNow...]\n");
                printf("[USE[CTRL+C]HERE_TO_EXIT_PROGRAM!]\n");
                fflush(stdout);
            };;
        #undef MSG_MAX_INDEX //://///////////////////////////://

    };; //://////////////////////////////////////////////////://

    #undef M //:#############################################://
    //:######################################################://

}
 






//:MakeIntResourceA /////////////////////////////////////////://
char*
fun(MakeIntResourceA)( int i ){

    #define MACRO_16BITS unsigned short
    #define MACRO_64BITS unsigned long long
   
    MACRO_16BITS  wword = (MACRO_16BITS)i    ; //:TRUNCATE
    MACRO_64BITS  qword = (MACRO_64BITS)wword; //:ZERO_EXTEND
    char* ret_out=(char*)qword; //://////////////:CAST

    #define T unsigned short     //:TRUNCATE
    #define E unsigned __int64   //:ZERO_EXTEND
    #define C char*              //:CAST

    //: stackoverflow.com/questions/3610565
    char* ret_chk=((C)((E)((T)(i))));

    assert( ret_chk == ret_out );

    return( ret_out );

    #undef  MACRO_16BITS  //////////////////////////////////////
    #undef  MACRO_32BITS  //////////////////////////////////////
                          //////////////////////////////////////
    #undef  C  /////////////////////////////////////////////////
    #undef  E  /////////////////////////////////////////////////
    #undef  T  /////////////////////////////////////////////////
} //:////////////////////////////////////// MakeIntResourceA ://
//:WinMsgHanWndPoc //////////////////////////////////////////://
__stdcall
__int64 //:LRESULT
fun(WinMsgHanWndPoc)(
/**/           void*    han_win   //:HWND
,   unsigned   int      Msg       //:...?...
,   unsigned __int64    wParam    //:WPARAM
,            __int64    lParam    //:LPARAM
){
    //:An LRESULT tells us what we did
    //:with the message. If handled it
    //:should return zero.
    __int64 return_this_result = 0; //:LRESULT
    int ok = 0; //:BOOL

    //|SOURCE:winuser.h |___________|//
    //| wm_size    = 0x0005 ;       |//
    //| wm_keydown = 0x0100 ;       |//
    //| wm_keyup   = 0x0101 ;       |//
    //| wm_close   = 0x0010 ;       |//
    //| wm_destroy = 0x0002 ;       |//
    //| wm_paint   = 0x000F ;       |//
    //| vk_escape  = 0x001B ;       |//
    //|_____________________________|//

    switch(Msg){ //:- - - - - - - - - - - - - -://
    case 0x0005/**wm_size**/:{

        printf("[SRC/NATIVE/WINDOW/creation._:WM_SIZE]\n");
        fflush(stdout);

    }break;
    case 0x0100 /**wm_keydown**/:{
        if(wParam==0x001B /**vk_escape**/ ){

            ok = (int)(unsigned long long)
                 (( TYP(F_01) )(INS(DestroyWindow)))(han_win);

            if(0==ok){ H("[0OK_1]");}

        }else{
            //:KEBO_DOWN_HandleVirtualKey( wParam );
        };;

    }break;

    case 0x0101 /**wm_keyup**/:{
        
            //:KEBO_UPPP_HandleVirtualKey( wParam );

    }break;

    //:WM_CLOSE: The "[X]" button was clicked.
    case 0x0010 /**wm_close**/:

        ok = (int)(unsigned long long)
            (( TYP(F_01) )(INS(DestroyWindow)))(han_win);

        if(0==ok){ H("[0OK_2]");}

    //:WM_DESTROY: ( DESTROYED|DESTROYING )
    case 0x0002 /**wm_destroy**/:  
        //: Send "WM_QUIT" to exit msg loop.
        ((TYP(F_01))INS(PostQuitMessage))(0);

    case 0x000F /**wm_paint**/:
        
        //:SEE[ WM_PAINT_COMMENTS_SECTION ]

    //:Keep window responsive:
    default: 
        return_this_result=(
            (__int64)
            (   (TYP(F_04))   (INS(DefWindowProcW))   )(
            /**/(void*)                han_win  
            ,   (void*)(unsigned long long)Msg
            ,   (void*)                 wParam
            ,   (void*)                 lParam
            )
        );;
    };;//:- - - - - - - - - - - - - - - - - - -://

    return( return_this_result );
} //://////////////////////////////////////// WinMsgHanWndPoc://

#undef  lib ////////////////////////////////////////////: 01 ://
#undef  LIB ////////////////////////////////////////////: 02 ://
#undef  GM1 ////////////////////////////////////////////: 03 ://
#undef  GM2 ////////////////////////////////////////////: 04 ://
#undef  K_1 ////////////////////////////////////////////: 05 ://
#undef  K_2 ////////////////////////////////////////////: 06 ://                                   
#undef  MAK ////////////////////////////////////////////: 07 ://   
#undef  TYP ////////////////////////////////////////////: 08 ://   
#undef  INS ////////////////////////////////////////////: 09 ://   
#undef  FUN ////////////////////////////////////////////: 10 ://
#undef  EXA ////////////////////////////////////////////: 11 ://
#undef  VAR ////////////////////////////////////////////: 12 ://
#undef  fun ////////////////////////////////////////////: 13 ://
#undef   H  ////////////////////////////////////////////: 14 ://
#undef   D  ////////////////////////////////////////////: 15 ://
#undef  NIL ////////////////////////////////////////////: 16 ://
#undef  ins ////////////////////////////////////////////: 17 ://
#undef  MEM ////////////////////////////////////////////: 18 ://


//:Comments Section:                                         ://
//:HBR_BACKGROUND_CAN_BE_NULL_FOR_VULKAN_WINDOW              ://
//                                                            //
//      //| Looking at:                            |//        //
//      //| https://github.com/glfw/glfw/blob/     |//        //
//      //| master/src/win32_window.c              |//        //
//      //| does not look like background          |//        //
//      //| brush color eneds to be set.           |//        //
//      //|                                        |//        //
//      //| Code here specifically says:           |//        //
//      //| "No Background Required For GL"        |//        //
//      //| http://nehe.gamedev.net/tutorial       |//        //
//      //| /creating_an_opengl_window_(win32)     |//        //
//      //| /13001/                                |//        //
//      //- W.hbrBackground=(                      -//        //
//      //-     /**/(HBRUSH)                       -//        //
//      //-     /**/ FP->GDI32.GetStockObject(     -//        //
//      //-     /**/     FP->GDI32.DATA.BRUSH.BLACK-//        //
//      //-     /**/)                              -//        //
//      //- );;                                    -//        //
//                                                            //
//      Comment originally taken from:                        //
//      V:\VG\03\VG03.ALL                                     //
//                                                            //
//      And I ran it and got a window that vulkan liked,      //
//      so I know this to be true.                            //
//                                                            //
//      DATE[ 2020_04_22 ]                                    //


//:WM:WM_PAINT_COMMENTS_SECTION:
//:WMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWM://
////    //:[TODO]:Something to pace the updating            ////
////    //:of graphics.                                     ////
////                                                        ////
////                                                        ////
////    //+ DELETE THIS BLOCK +//                           ////
////    //- //:I dont think this is needed:         -//     ////
////    //- //: You may use the same HDC in both    -//     ////
////    //- //: threads, but not at the same time.  -//     ////
////    //- //: SEE[ gl-hdc-thread-quote ]          -//     ////
////    //- if(GLEB_SWIN.render_tick_function_has){ -//     ////
////    //-    GLEB_SWIN.render_tick_function();    -//     ////
////    //- };;                                     -//     ////
////                                                        ////
////    //: This might be better done setting a flag        ////
////    //: than using a callback. In order to prevent      ////
////    //: drawing code from being invoked on the          ////
////    //: wrong thread.                                   ////
////                                                        ////
////    //: With that said, setting a flag:                 ////
////    //- ENGETHER.THREADING.InterlockedIncrement64( -//  ////
////    //-     &( GLEB_SWIN.THREAD_SAFE_FLAGS.        -//  ////
////    //-        redraw_message_count )              -//  ////
////    //- );;                                        -//  ////
////                                                        ////
////                                                        ////
////    //+ This call needs to be made from    +//          ////
////    //+ the same thread as your OpenGL     +//          ////
////    //+ calls.                             +//          ////
////    //# DONT_HERE:GLEB_SWIN_SwapBuffers(); #//          ////
//:WMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWMWM://


//:Stupid needless optimization. You can spare 64bits
//:to hold onto the function pointer for the duration
//:of the program.
///// int fun( DestroyWindow )( void* han_win ){
///// 
/////     //:Grab function pointer to: "DestroyWindow":
/////     ////////////////////////////////////////////////////////////
/////     TYP(FUN) VAR(DestroyWindow)=
/////     FUN(GetProcAddress)("dll_u32","DestroyWindow");
///// 
/////     if( ((void*)0) != VAR(DestroyWindow) ){
/////         D("[SUCCESS:GOT_FUNC_PTR:DestroyWindow]");
/////     }else{
/////         H("[FAILURE:GOT_FUNC_PTR:DestroyWindow]");
/////     };;
/////     ////////////////////////////////////////////////////////////
///// 
/////     int RET( DestroyWindow )=((int)
/////     ((TYP(F_01))VAR(DestroyWindow))(
/////         han_win
/////     ));;
///// 
/////     return( RET( DestroyWindow ) );
///// };;

    ////////////////////////////////////////////////////////////
    //- DONT DO THIS:                                        -//
    //- 1: Synonymous ways of referring to the same thing    -//
    //-    in code is BAD. (harder to find all references)   -//
    //-                                                      -//
    //- 2: The original reason you were about to do this     -//
    //-    was you saw TYP(LoadIconA) when it should have    -//
    //-    been:       INS(LoadIconA).                       -//
    //-                                                      -//
    //-    Adding synonym would make bug harder to spot.     -//
    //-                                                      -//
    //:In case you want to refer to function pointer's
    //:type as the name of the function pointer:
    //: typedef     TYP(CreateWindowExW  ) TYP(FUN);
    //: typedef     TYP(GetDesktopWindow ) TYP(FUN);
    //: typedef     TYP(RegisterClassExW ) TYP(FUN);
    //: typedef     TYP(LoadIconA        ) TYP(FUN);
    //: typedef     TYP(LoadCursorA      ) TYP(FUN);
    //: typedef     TYP(GetModuleHandleW ) TYP(FUN);
    //: typedef     TYP(DefWindowProcW   ) TYP(FUN);
    //: typedef     TYP(DestroyWindow    ) TYP(FUN);
    //: typedef     TYP(PostQuitMessage  ) TYP(FUN);    
    ////////////////////////////////////////////////////////////

    //:Problem with PFN(SomeFunction)
    //:
    //:1: Is it a TYPE or the actual pointer?
    //:2: Since you do: FunctionsThisWay
    //:   and variables_this_way
    //:   Is there really any benifit since you can tell:
    //:
    //:  INS( SomeThing  )   <-- function pointer instance
    //:  INS( some_thing )   <-- data instance
    //:  TYP( FUN )          <-- A TYPE that is "function" (PFN)
    //:  FUN( SomeThing  )   <-- A function name